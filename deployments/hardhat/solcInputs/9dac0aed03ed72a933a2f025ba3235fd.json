{
  "language": "Solidity",
  "sources": {
    "contracts/contracts-upgradable/example/ExampleOFTUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\r\nimport \"../token/OFT/OFTUpgradeable.sol\";\r\n\r\ncontract ExampleOFTUpgradeable is Initializable, OFTUpgradeable, Proxied {\r\n    function initialize(string memory _name, string memory _symbol, uint _initialSupply, address _lzEndpoint) public initializer {\r\n        __ExampleOFTUpgradeable_init(_name, _symbol, _initialSupply, _lzEndpoint);\r\n    }\r\n\r\n    function __ExampleOFTUpgradeable_init(string memory _name, string memory _symbol, uint _initialSupply, address _lzEndpoint) internal onlyInitializing {\r\n        __Ownable_init();\r\n        __OFTUpgradeable_init(_name, _symbol, _lzEndpoint);\r\n        __ExampleOFTUpgradeable_init_unchained(_name, _symbol, _initialSupply, _lzEndpoint);\r\n    }\r\n\r\n    function __ExampleOFTUpgradeable_init_unchained(string memory, string memory, uint _initialSupply, address) internal onlyInitializing {\r\n        _mint(_msgSender(), _initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "hardhat-deploy/solc_0.8/proxy/Proxied.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Proxied {\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n}\n"
    },
    "contracts/contracts-upgradable/token/OFT/OFTUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\r\nimport \"./OFTCoreUpgradeable.sol\";\r\nimport \"./IOFTUpgradeable.sol\";\r\n\r\n// override decimal() function is needed\r\ncontract OFTUpgradeable is Initializable, OFTCoreUpgradeable, ERC20Upgradeable, IOFTUpgradeable {\r\n    function __OFTUpgradeable_init(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {\r\n        __ERC20_init_unchained(_name, _symbol);\r\n        __OFTCoreUpgradeable_init_unchained(_lzEndpoint);\r\n    }\r\n\r\n    function __OFTUpgradeable_init_unchained(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCoreUpgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IOFTUpgradeable).interfaceId || interfaceId == type(IERC20Upgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _mint(_toAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/contracts-upgradable/token/OFT/OFTCoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./IOFTCoreUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\r\nimport \"../../lzApp/NonblockingLzAppUpgradeable.sol\";\r\n\r\nabstract contract OFTCoreUpgradeable is Initializable, NonblockingLzAppUpgradeable, ERC165Upgradeable, IOFTCoreUpgradeable {\r\n    uint public constant NO_EXTRA_GAS = 0;\r\n    uint public constant FUNCTION_TYPE_SEND = 1;\r\n    bool public useCustomAdapterParams;\r\n\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n\r\n    function __OFTCoreUpgradeable_init(address _endpoint) internal onlyInitializing {\r\n        __OFTCoreUpgradeable_init_unchained(_endpoint);\r\n    }\r\n\r\n    function __OFTCoreUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\r\n        __NonblockingLzAppUpgradeable_init_unchained(_endpoint);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IOFTCoreUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _amount);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, amount);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, amount);\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, NO_EXTRA_GAS);\r\n        } else {\r\n            require(_adapterParams.length == 0, \"LzApp: _adapterParams must be empty.\");\r\n        }\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, amount, nonce);\r\n    }\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external onlyOwner {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual returns(uint);\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "contracts/contracts-upgradable/token/OFT/IOFTUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./IOFTCoreUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IOFTUpgradeable is IOFTCoreUpgradeable, IERC20Upgradeable {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/contracts-upgradable/token/OFT/IOFTCoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _amount, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _amount, uint64 _nonce);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./LzAppUpgradeable.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\r\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\r\n        __NonblockingLzAppUpgradeable_init_unchained(_endpoint);\r\n    }\r\n\r\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\r\n        __LzAppUpgradeable_init_unchained(_endpoint);\r\n    }\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // try-catch all errors/exceptions\r\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiverUpgradeable.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\";\r\nimport \"../interfaces/ILayerZeroEndpointUpgradeable.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzAppUpgradeable is Initializable, OwnableUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\r\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n    mapping(uint16 => mapping(uint => uint)) public minDstGasLookup;\r\n\r\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\r\n    event SetMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount);\r\n\r\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\r\n        __LzAppUpgradeable_init_unchained(_endpoint);\r\n    }\r\n\r\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\r\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(uint16 _dstChainId, uint _type, bytes memory _adapterParams, uint _extraGas) internal view {\r\n        uint providedGasLimit = getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\r\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function getGasLimit(bytes memory _adapterParams) public pure returns (uint gasLimit) {\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // allow owner to set it multiple times.\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\r\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    function setMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount) external onlyOwner {\r\n        require(_dstGasAmount > 0, \"LzApp: invalid _dstGasAmount\");\r\n        minDstGasLookup[_dstChainId][_type] = _dstGasAmount;\r\n        emit SetMinDstGasLookup(_dstChainId, _type, _dstGasAmount);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface ILayerZeroReceiverUpgradeable {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}\r\n"
    },
    "contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface ILayerZeroUserApplicationConfigUpgradeable {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n"
    },
    "contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./ILayerZeroUserApplicationConfigUpgradeable.sol\";\r\n\r\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/Relayer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\r\n\r\nimport \"../../interfaces/ILayerZeroRelayer.sol\";\r\nimport \"../../interfaces/ILayerZeroUltraLightNodeV1.sol\";\r\n\r\ncontract Relayer is ILayerZeroRelayer, ReentrancyGuard, OwnableUpgradeable, Proxied {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    using SafeMath for uint128;\r\n    using SafeMath for uint64;\r\n\r\n    ILayerZeroUltraLightNodeV1 public uln;\r\n\r\n    struct DstPrice {\r\n        uint128 dstPriceRatio; // 10^10\r\n        uint128 dstGasPriceInWei;\r\n    }\r\n\r\n    struct DstConfig {\r\n        uint128 dstNativeAmtCap;\r\n        uint64 baseGas;\r\n        uint64 gasPerByte;\r\n    }\r\n\r\n    // [_chainId] => DstPriceData. change often\r\n    mapping(uint16 => DstPrice) public dstPriceLookup;\r\n    // [_chainId][_outboundProofType] => DstConfig. change much less often\r\n    mapping(uint16 => mapping(uint16 => DstConfig)) public dstConfigLookup;\r\n\r\n    mapping(address => bool) public approvedAddresses;\r\n\r\n    event WithdrawTokens(address token, address to, uint amount);\r\n    event Withdraw(address to, uint amount);\r\n    event ApproveAddress(address addr, bool approved);\r\n\r\n    // owner is always approved\r\n    modifier onlyApproved() {\r\n        if (owner() != msg.sender) {\r\n            require(isApproved(msg.sender), \"Relayer: not approved\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function initialize(address _uln) public proxied initializer {\r\n        __Ownable_init();\r\n        uln = ILayerZeroUltraLightNodeV1(_uln);\r\n        setApprovedAddress(address(this), true);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // onlyApproved\r\n    function validateTransactionProofV2(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes calldata _transactionProof, address payable _to) external payable onlyApproved nonReentrant {\r\n        (bool sent, ) = _to.call{value: msg.value}(\"\");\r\n        require(sent, \"Relayer: failed to send ether\");\r\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _transactionProof);\r\n    }\r\n\r\n    function validateTransactionProofV1(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes calldata _transactionProof) external onlyApproved nonReentrant {\r\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _transactionProof);\r\n    }\r\n\r\n    function setDstPrice(uint16 _chainId, uint128 _dstPriceRatio, uint128 _dstGasPriceInWei) external onlyApproved {\r\n        dstPriceLookup[_chainId] = DstPrice(_dstPriceRatio, _dstGasPriceInWei);\r\n    }\r\n\r\n    function setDstConfig(uint16 _chainId, uint16 _outboundProofType, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external onlyApproved {\r\n        dstConfigLookup[_chainId][_outboundProofType] = DstConfig(_dstNativeAmtCap, _baseGas, _gasPerByte);\r\n    }\r\n\r\n    // other relayer fees are withdrawn through the RelayerFee interface\r\n    // uint8 public constant WITHDRAW_TYPE_RELAYER_QUOTED_FEES = 2;\r\n    function withdrawQuotedFromULN(address payable _to, uint _amount) external onlyApproved {\r\n        uln.withdrawNative(2, address(0x0), _to, _amount);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // onlyOwner\r\n\r\n    function setApprovedAddress(address _relayerAddress, bool _approve) public onlyOwner {\r\n        approvedAddresses[_relayerAddress] = _approve;\r\n        emit ApproveAddress(_relayerAddress, _approve);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // view functions\r\n\r\n    // txType 1\r\n    // bytes  [2       32      ]\r\n    // fields [txType  extraGas]\r\n    // txType 2\r\n    // bytes  [2       32        32            bytes[]         ]\r\n    // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\r\n    // User App Address is not used in this version\r\n    function _getPrices(uint16 _dstChainId, uint16 _outboundProofType, address, bytes memory _adapterParameters) internal view returns (uint basePrice, uint pricePerByte) {\r\n        // decoding the _adapterParameters - reverts if type 2 and there is no dstNativeAddress\r\n        require(_adapterParameters.length == 34 || _adapterParameters.length > 66, \"Relayer: wrong _adapterParameters size\");\r\n        uint16 txType;\r\n        uint extraGas;\r\n        assembly {\r\n            txType := mload(add(_adapterParameters, 2))\r\n            extraGas := mload(add(_adapterParameters, 34))\r\n        }\r\n        require(extraGas > 0, \"Relayer: gas too low\");\r\n        require(txType == 1 || txType == 2, \"Relayer: unsupported txType\");\r\n\r\n        DstPrice storage dstPrice = dstPriceLookup[_dstChainId];\r\n        DstConfig storage dstConfig = dstConfigLookup[_dstChainId][_outboundProofType];\r\n\r\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\r\n        if (txType == 2) {\r\n            uint dstNativeAmt;\r\n            assembly {\r\n                dstNativeAmt := mload(add(_adapterParameters, 66))\r\n            }\r\n            require(dstConfig.dstNativeAmtCap >= dstNativeAmt, \"Relayer: dstNativeAmt too large\");\r\n            totalRemoteToken = totalRemoteToken.add(dstNativeAmt);\r\n        }\r\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\r\n        uint remoteGasTotal = dstPrice.dstGasPriceInWei.mul(dstConfig.baseGas.add(extraGas));\r\n\r\n        totalRemoteToken = totalRemoteToken.add(remoteGasTotal);\r\n\r\n        // tokenConversionRate = dstPrice / localPrice\r\n        // basePrice = totalRemoteToken * tokenConversionRate\r\n        basePrice = totalRemoteToken.mul(dstPrice.dstPriceRatio).div(10**10);\r\n\r\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\r\n        pricePerByte = dstPrice.dstGasPriceInWei.mul(dstConfig.gasPerByte).mul(dstPrice.dstPriceRatio).div(10**10);\r\n    }\r\n\r\n    function notifyRelayer(uint16 _dstChainId, uint16 _outboundProofType, bytes calldata _adapterParams) external override {\r\n        //do nothing\r\n    }\r\n\r\n    function getPrice(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint payloadSize, bytes calldata _adapterParams) external view override returns (uint) {\r\n        (uint basePrice, uint pricePerByte) = _getPrices(_dstChainId, _outboundProofType, _userApplication, _adapterParams);\r\n        return basePrice.add(payloadSize.mul(pricePerByte));\r\n    }\r\n\r\n    function isApproved(address _relayerAddress) public view override returns (bool) {\r\n        return approvedAddresses[_relayerAddress];\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ILayerZeroRelayer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface ILayerZeroRelayer {\r\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\r\n    // @param _dstChainId - the destination endpoint identifier\r\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\r\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\r\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\r\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\r\n    function getPrice(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external view returns (uint price);\r\n\r\n    // @notice Ultra-Light Node notifies the Oracle of a new block information relaying request\r\n    // @param _dstChainId - the destination endpoint identifier\r\n    // @param _outboundProofType - the proof type identifier to specify the data to be relayed\r\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\r\n    function notifyRelayer(uint16 _dstChainId, uint16 _outboundProofType, bytes calldata _adapterParams) external;\r\n\r\n    // @notice query if the address is an approved actor for privileges like data submission and fee withdrawal etc.\r\n    // @param _address - the address to be checked\r\n    function isApproved(address _address) external view returns (bool approved);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroUltraLightNodeV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface ILayerZeroUltraLightNodeV1 {\r\n    // a Relayer can execute the validateTransactionProof()\r\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes calldata _transactionProof) external;\r\n\r\n    // an Oracle delivers the block data using updateHash()\r\n    function updateHash(uint16 _remoteChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _data) external;\r\n\r\n    // can only withdraw the receivable of the msg.sender\r\n    function withdrawNative(uint8 _type, address _owner, address payable _to, uint _amount) external;\r\n\r\n    function withdrawZRO(address _to, uint _amount) external;\r\n\r\n    // view functions\r\n    function oracleQuotedAmount(address _oracle) external view returns (uint);\r\n\r\n    function relayerQuotedAmount(address _relayer) external view returns (uint);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/LayerZeroOracleMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroOracle.sol\";\r\nimport \"../interfaces/ILayerZeroUltraLightNodeV1.sol\";\r\n\r\ncontract LayerZeroOracleMock is ILayerZeroOracle, Ownable, ReentrancyGuard {\r\n    mapping(address => bool) public approvedAddresses;\r\n    mapping(uint16 => mapping(uint16 => uint)) public chainPriceLookup;\r\n    uint public fee;\r\n    ILayerZeroUltraLightNodeV1 public uln; // ultraLightNode instance\r\n\r\n    event OracleNotified(uint16 dstChainId, uint16 _outboundProofType, uint blockConfirmations);\r\n    event Withdraw(address to, uint amount);\r\n\r\n    constructor() {\r\n        approvedAddresses[msg.sender] = true;\r\n    }\r\n\r\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external override {\r\n        emit OracleNotified(_dstChainId, _outboundProofType, _outboundBlockConfirmations);\r\n    }\r\n\r\n    function updateHash(uint16 _remoteChainId, bytes32 _blockHash, uint _confirmations, bytes32 _data) external {\r\n        require(approvedAddresses[msg.sender], \"LayerZeroOracleMock: caller must be approved\");\r\n        uln.updateHash(_remoteChainId, _blockHash, _confirmations, _data);\r\n    }\r\n\r\n    function withdraw(address payable _to, uint _amount) public onlyOwner nonReentrant {\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        require(success, \"failed to withdraw\");\r\n        emit Withdraw(_to, _amount);\r\n    }\r\n\r\n    // owner can set uln\r\n    function setUln(address ulnAddress) external onlyOwner {\r\n        uln = ILayerZeroUltraLightNodeV1(ulnAddress);\r\n    }\r\n\r\n    // mock, doesnt do anything\r\n    function setJob(uint16 _chain, address _oracle, bytes32 _id, uint _fee) public onlyOwner {}\r\n\r\n    function setDeliveryAddress(uint16 _dstChainId, address _deliveryAddress) public onlyOwner {}\r\n\r\n    function setPrice(uint16 _destinationChainId, uint16 _outboundProofType, uint _price) external onlyOwner {\r\n        chainPriceLookup[_outboundProofType][_destinationChainId] = _price;\r\n    }\r\n\r\n    function setApprovedAddress(address _oracleAddress, bool _approve) external {\r\n        approvedAddresses[_oracleAddress] = _approve;\r\n    }\r\n\r\n    function isApproved(address _relayerAddress) public view override returns (bool) {\r\n        return approvedAddresses[_relayerAddress];\r\n    }\r\n\r\n    function getPrice(uint16 _destinationChainId, uint16 _outboundProofType) external view override returns (uint) {\r\n        return chainPriceLookup[_outboundProofType][_destinationChainId];\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface ILayerZeroOracle {\r\n    // @notice query the oracle price for relaying block information to the destination chain\r\n    // @param _dstChainId the destination endpoint identifier\r\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\r\n    function getPrice(uint16 _dstChainId, uint16 _outboundProofType) external view returns (uint price);\r\n\r\n    // @notice Ultra-Light Node notifies the Oracle of a new block information relaying request\r\n    // @param _dstChainId the destination endpoint identifier\r\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\r\n    // @param _outboundBlockConfirmations the number of source chain block confirmation needed\r\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external;\r\n\r\n    // @notice query if the address is an approved actor for privileges like data submission and fee withdrawal etc.\r\n    // @param _address the address to be checked\r\n    function isApproved(address _address) external view returns (bool approved);\r\n}\r\n"
    },
    "contracts/mocks/LayerZeroOracleBadMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroOracle.sol\";\r\nimport \"../interfaces/ILayerZeroUltraLightNodeV1.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n// mock is designed to try and send the msg it just received again to trigger a revert\r\ncontract LayerZeroOracleBadMock is ILayerZeroOracle, Ownable, ReentrancyGuard {\r\n    mapping(address => bool) public approvedAddresses;\r\n    mapping(uint16 => mapping(uint16 => uint)) public chainPriceLookup;\r\n    uint public fee;\r\n    ILayerZeroUltraLightNodeV1 public uln; // ultraLightNode instance\r\n    ILayerZeroEndpoint public endpoint; // for bad oracles trying to talk to endpoint\r\n\r\n    event OracleNotified(uint16 dstChainId, uint16 _outboundProofType, uint blockConfirmations);\r\n    event Withdraw(address to, uint amount);\r\n\r\n    constructor() {\r\n        approvedAddresses[msg.sender] = true;\r\n    }\r\n\r\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external override {\r\n        // oracle is set to do bad things and try to call send again, this should revert\r\n        endpoint.send(_dstChainId, \"0x\", \"0x\", payable(address(0)), address(0), \"0x\");\r\n        emit OracleNotified(_dstChainId, _outboundProofType, _outboundBlockConfirmations);\r\n    }\r\n\r\n    function updateHash(uint16 _remoteChainId, bytes32 _blockHash, uint _confirmations, bytes32 _data) external {\r\n        require(approvedAddresses[msg.sender], \"LayerZeroOracleMock: caller must be approved\");\r\n        uln.updateHash(_remoteChainId, _blockHash, _confirmations, _data);\r\n    }\r\n\r\n    function withdraw(address payable _to, uint _amount) public onlyOwner nonReentrant {\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        require(success, \"failed to withdraw\");\r\n        emit Withdraw(_to, _amount);\r\n    }\r\n\r\n    // owner can set uln\r\n    function setUln(address ulnAddress) external onlyOwner {\r\n        uln = ILayerZeroUltraLightNodeV1(ulnAddress);\r\n    }\r\n\r\n    // owner can set uln\r\n    function setEndpoint(address endpointAddress) external onlyOwner {\r\n        endpoint = ILayerZeroEndpoint(endpointAddress);\r\n    }\r\n\r\n    // mock, doesnt do anything\r\n    function setJob(uint16 _chain, address _oracle, bytes32 _id, uint _fee) public onlyOwner {}\r\n\r\n    function setDeliveryAddress(uint16 _dstChainId, address _deliveryAddress) public onlyOwner {}\r\n\r\n    function setPrice(uint16 _destinationChainId, uint16 _outboundProofType, uint _price) external onlyOwner {\r\n        chainPriceLookup[_outboundProofType][_destinationChainId] = _price;\r\n    }\r\n\r\n    function setApprovedAddress(address _oracleAddress, bool _approve) external {\r\n        approvedAddresses[_oracleAddress] = _approve;\r\n    }\r\n\r\n    function isApproved(address _relayerAddress) public view override returns (bool) {\r\n        return approvedAddresses[_relayerAddress];\r\n    }\r\n\r\n    function getPrice(uint16 _destinationChainId, uint16 _outboundProofType) external view override returns (uint) {\r\n        return chainPriceLookup[_outboundProofType][_destinationChainId];\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../libraries/LzLib.sol\";\r\n\r\n/*\r\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\r\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\r\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\r\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\r\nunlike a real LayerZero endpoint, it is\r\n- no messaging library versioning\r\n- send() will short circuit to lzReceive()\r\n- no user application configuration\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    uint8 internal constant _NOT_ENTERED = 1;\r\n    uint8 internal constant _ENTERED = 2;\r\n\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    bool public nextMsgBlocked;\r\n\r\n    // fee config\r\n    RelayerFeeConfig public relayerFeeConfig;\r\n    ProtocolFeeConfig public protocolFeeConfig;\r\n    uint public oracleFee;\r\n    bytes public defaultAdapterParams;\r\n\r\n    // path = remote addrss + local address\r\n    // inboundNonce = [srcChainId][path].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    //todo: this is a hack\r\n    // outboundNonce = [dstChainId][srcAddress]\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    //    // outboundNonce = [dstChainId][path].\r\n    //    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n    // msgToDeliver = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\r\n\r\n    // reentrancy guard\r\n    uint8 internal _send_entered_state = 1;\r\n    uint8 internal _receive_entered_state = 1;\r\n\r\n    struct ProtocolFeeConfig {\r\n        uint zroFee;\r\n        uint nativeBP;\r\n    }\r\n\r\n    struct RelayerFeeConfig {\r\n        uint128 dstPriceRatio; // 10^10\r\n        uint128 dstGasPriceInWei;\r\n        uint128 dstNativeAmtCap;\r\n        uint64 baseGas;\r\n        uint64 gasPerByte;\r\n    }\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    struct QueuedPayload {\r\n        address dstAddress;\r\n        uint64 nonce;\r\n        bytes payload;\r\n    }\r\n\r\n    modifier sendNonReentrant() {\r\n        require(_send_entered_state == _NOT_ENTERED, \"LayerZeroMock: no send reentrancy\");\r\n        _send_entered_state = _ENTERED;\r\n        _;\r\n        _send_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier receiveNonReentrant() {\r\n        require(_receive_entered_state == _NOT_ENTERED, \"LayerZeroMock: no receive reentrancy\");\r\n        _receive_entered_state = _ENTERED;\r\n        _;\r\n        _receive_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\r\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\r\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockChainId = _chainId;\r\n\r\n        // init config\r\n        relayerFeeConfig = RelayerFeeConfig({\r\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\r\n            dstGasPriceInWei: 1e10,\r\n            dstNativeAmtCap: 1e19,\r\n            baseGas: 100,\r\n            gasPerByte: 1\r\n        });\r\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\r\n        oracleFee = 1e16;\r\n        defaultAdapterParams = LzLib.buildDefaultAdapterParams(200000);\r\n    }\r\n\r\n    // ------------------------------ ILayerZeroEndpoint Functions ------------------------------\r\n    function send(uint16 _chainId, bytes memory _path, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) external payable override sendNonReentrant {\r\n        require(_path.length == 40, \"LayerZeroMock: incorrect remote address size\"); // only support evm chains\r\n\r\n        address dstAddr;\r\n        assembly {\r\n            dstAddr := mload(add(_path, 20))\r\n        }\r\n\r\n        address lzEndpoint = lzEndpointLookup[dstAddr];\r\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\r\n\r\n        // not handle zro token\r\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\r\n        (uint nativeFee, ) = estimateFees(_chainId, msg.sender, _payload, _zroPaymentAddress != address(0x0), adapterParams);\r\n        require(msg.value >= nativeFee, \"LayerZeroMock: not enough native for fees\");\r\n\r\n        uint64 nonce = ++outboundNonce[_chainId][msg.sender];\r\n\r\n        // refund if they send too much\r\n        uint amount = msg.value - nativeFee;\r\n        if (amount > 0) {\r\n            (bool success, ) = _refundAddress.call{value: amount}(\"\");\r\n            require(success, \"LayerZeroMock: failed to refund\");\r\n        }\r\n\r\n        // Mock the process of receiving msg on dst chain\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        (, uint extraGas, uint dstNativeAmt, address payable dstNativeAddr) = LzLib.decodeAdapterParams(adapterParams);\r\n        if (dstNativeAmt > 0) {\r\n            (bool success, ) = dstNativeAddr.call{value: dstNativeAmt}(\"\");\r\n            if (!success) {\r\n                emit ValueTransferFailed(dstNativeAddr, dstNativeAmt);\r\n            }\r\n        }\r\n\r\n        bytes memory srcUaAddress = abi.encodePacked(msg.sender, dstAddr); // cast this address to bytes\r\n        bytes memory payload = _payload;\r\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, srcUaAddress, dstAddr, nonce, extraGas, payload);\r\n    }\r\n\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _path, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external override receiveNonReentrant {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n\r\n        // assert and increment the nonce. no message shuffling\r\n        require(_nonce == ++inboundNonce[_srcChainId][_path], \"LayerZeroMock: wrong nonce\");\r\n\r\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\r\n        if (sp.payloadHash != bytes32(0)) {\r\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\r\n\r\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\r\n            if (msgs.length > 0) {\r\n                // extend the array\r\n                msgs.push(newMsg);\r\n\r\n                // shift all the indexes up for pop()\r\n                for (uint i = 0; i < msgs.length - 1; i++) {\r\n                    msgs[i + 1] = msgs[i];\r\n                }\r\n\r\n                // put the newMsg at the bottom of the stack\r\n                msgs[0] = newMsg;\r\n            } else {\r\n                msgs.push(newMsg);\r\n            }\r\n        } else if (nextMsgBlocked) {\r\n            storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n            emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, bytes(\"\"));\r\n            // ensure the next msgs that go through are no longer blocked\r\n            nextMsgBlocked = false;\r\n        } else {\r\n            try ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _path, _nonce, _payload) {} catch (bytes memory reason) {\r\n                storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n                emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, reason);\r\n                // ensure the next msgs that go through are no longer blocked\r\n                nextMsgBlocked = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _path) external view override returns (uint64) {\r\n        return inboundNonce[_chainID][_path];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes memory _payload, bool _payInZRO, bytes memory _adapterParams) public view override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\r\n\r\n        // Relayer Fee\r\n        uint relayerFee = _getRelayerFee(_dstChainId, 1, _userApplication, _payload.length, adapterParams);\r\n\r\n        // LayerZero Fee\r\n        uint protocolFee = _getProtocolFees(_payInZRO, relayerFee, oracleFee);\r\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\r\n\r\n        // return the sum of fees\r\n        nativeFee = nativeFee + relayerFee + oracleFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _path, bytes calldata _payload) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\r\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZeroMock: invalid payload\");\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_path];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _path, nonce, _payload);\r\n        emit PayloadCleared(_srcChainId, _path, nonce, dstAddress);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _path) external view override returns (bool) {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n\r\n    function getSendLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function isSendingPayload() external view override returns (bool) {\r\n        return _send_entered_state == _ENTERED;\r\n    }\r\n\r\n    function isReceivingPayload() external view override returns (bool) {\r\n        return _receive_entered_state == _ENTERED;\r\n    }\r\n\r\n    function getConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        address, /*_ua*/\r\n        uint /*_configType*/\r\n    ) external pure override returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function getSendVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getReceiveVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        uint, /*_configType*/\r\n        bytes memory /*_config*/\r\n    ) external override {}\r\n\r\n    function setSendVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function setReceiveVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _path) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\r\n        require(sp.dstAddress == msg.sender, \"LayerZeroMock: invalid caller\");\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        emit UaForceResumeReceive(_srcChainId, _path);\r\n\r\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\r\n        _clearMsgQue(_srcChainId, _path);\r\n    }\r\n\r\n    // ------------------------------ Other Public/External Functions --------------------------------------------------\r\n\r\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\r\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\r\n    }\r\n\r\n    // used to simulate messages received get stored as a payload\r\n    function blockNextMsg() external {\r\n        nextMsgBlocked = true;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function setRelayerPrice(uint128 _dstPriceRatio, uint128 _dstGasPriceInWei, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external {\r\n        relayerFeeConfig.dstPriceRatio = _dstPriceRatio;\r\n        relayerFeeConfig.dstGasPriceInWei = _dstGasPriceInWei;\r\n        relayerFeeConfig.dstNativeAmtCap = _dstNativeAmtCap;\r\n        relayerFeeConfig.baseGas = _baseGas;\r\n        relayerFeeConfig.gasPerByte = _gasPerByte;\r\n    }\r\n\r\n    function setProtocolFee(uint _zroFee, uint _nativeBP) external {\r\n        protocolFeeConfig.zroFee = _zroFee;\r\n        protocolFeeConfig.nativeBP = _nativeBP;\r\n    }\r\n\r\n    function setOracleFee(uint _oracleFee) external {\r\n        oracleFee = _oracleFee;\r\n    }\r\n\r\n    function setDefaultAdapterParams(bytes memory _adapterParams) external {\r\n        defaultAdapterParams = _adapterParams;\r\n    }\r\n\r\n    // --------------------- Internal Functions ---------------------\r\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\r\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _path) internal {\r\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n\r\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n        while (msgs.length > 0) {\r\n            QueuedPayload memory payload = msgs[msgs.length - 1];\r\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _path, payload.nonce, payload.payload);\r\n            msgs.pop();\r\n        }\r\n    }\r\n\r\n    function _getProtocolFees(bool _payInZro, uint _relayerFee, uint _oracleFee) internal view returns (uint) {\r\n        if (_payInZro) {\r\n            return protocolFeeConfig.zroFee;\r\n        } else {\r\n            return ((_relayerFee + _oracleFee) * protocolFeeConfig.nativeBP) / 10000;\r\n        }\r\n    }\r\n\r\n    function _getRelayerFee(\r\n        uint16, /* _dstChainId */\r\n        uint16, /* _outboundProofType */\r\n        address, /* _userApplication */\r\n        uint _payloadSize,\r\n        bytes memory _adapterParams\r\n    ) internal view returns (uint) {\r\n        (uint16 txType, uint extraGas, uint dstNativeAmt, ) = LzLib.decodeAdapterParams(_adapterParams);\r\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\r\n        if (txType == 2) {\r\n            require(relayerFeeConfig.dstNativeAmtCap >= dstNativeAmt, \"LayerZeroMock: dstNativeAmt too large \");\r\n            totalRemoteToken += dstNativeAmt;\r\n        }\r\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\r\n        uint remoteGasTotal = relayerFeeConfig.dstGasPriceInWei * (relayerFeeConfig.baseGas + extraGas);\r\n        totalRemoteToken += remoteGasTotal;\r\n\r\n        // tokenConversionRate = dstPrice / localPrice\r\n        // basePrice = totalRemoteToken * tokenConversionRate\r\n        uint basePrice = (totalRemoteToken * relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\r\n        uint pricePerByte = (relayerFeeConfig.dstGasPriceInWei * relayerFeeConfig.gasPerByte * relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        return basePrice + _payloadSize * pricePerByte;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}\r\n"
    },
    "contracts/libraries/LzLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary LzLib {\r\n    // LayerZero communication\r\n    struct CallParams {\r\n        address payable refundAddress;\r\n        address zroPaymentAddress;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Address type handling\r\n\r\n    struct AirdropParams {\r\n        uint airdropAmount;\r\n        bytes32 airdropAddress;\r\n    }\r\n\r\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\r\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\r\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\r\n        } else {\r\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\r\n        }\r\n    }\r\n\r\n    // Build Adapter Params\r\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\r\n        // txType 1\r\n        // bytes  [2       32      ]\r\n        // fields [txType  extraGas]\r\n        return abi.encodePacked(uint16(1), _uaGas);\r\n    }\r\n\r\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\r\n        require(_params.airdropAmount > 0, \"Airdrop amount must be greater than 0\");\r\n        require(_params.airdropAddress != bytes32(0x0), \"Airdrop address must be set\");\r\n\r\n        // txType 2\r\n        // bytes  [2       32        32            bytes[]         ]\r\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\r\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\r\n    }\r\n\r\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\r\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    // Decode Adapter Params\r\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\r\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\r\n        assembly {\r\n            txType := mload(add(_adapterParams, 2))\r\n            uaGas := mload(add(_adapterParams, 34))\r\n        }\r\n        require(txType == 1 || txType == 2, \"Unsupported txType\");\r\n        require(uaGas > 0, \"Gas too low\");\r\n\r\n        if (txType == 2) {\r\n            assembly {\r\n                airdropAmount := mload(add(_adapterParams, 66))\r\n                airdropAddress := mload(add(_adapterParams, 86))\r\n            }\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Address type handling\r\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\r\n        return address(uint160(uint(_bytes32Address)));\r\n    }\r\n\r\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\r\n        return bytes32(uint(uint160(_address)));\r\n    }\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/UltraLightNodeV2_WO_Validation.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// import \"../../interfaces/ILayerZeroValidationLibrary.sol\";\r\nimport \"../../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../../interfaces/ILayerZeroTreasury.sol\";\r\nimport \"../../interfaces/ILayerZeroEndpoint.sol\";\r\n// v2\r\nimport \"../../interfaces/ILayerZeroMessagingLibraryV2.sol\";\r\n// import \"./interfaces/ILayerZeroOracleV2.sol\";\r\nimport \"../../interfaces/ILayerZeroUltraLightNodeV2.sol\";\r\nimport \"../../interfaces/ILayerZeroRelayerV2.sol\";\r\nimport \"./NonceContract.sol\";\r\n\r\n\r\n\r\ncontract UltraLightNodeV2_wo_Validation is ILayerZeroMessagingLibraryV2, ILayerZeroUltraLightNodeV2, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    // Application config\r\n    uint public constant CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;\r\n    uint public constant CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;\r\n    uint public constant CONFIG_TYPE_RELAYER = 3;\r\n    uint public constant CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;\r\n    uint public constant CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;\r\n    uint public constant CONFIG_TYPE_ORACLE = 6;\r\n\r\n    // Token and Contracts\r\n    IERC20 public layerZeroToken;\r\n    ILayerZeroTreasury public treasuryContract;\r\n\r\n    mapping(address => uint) public nativeFees;\r\n    uint public treasuryZROFees;\r\n\r\n    // User Application\r\n    mapping(address => mapping(uint16 => ApplicationConfiguration)) public appConfig; // app address => chainId => config\r\n    mapping(uint16 => ApplicationConfiguration) public defaultAppConfig; // default UA settings if no version specified\r\n    mapping(uint16 => mapping(uint16 => bytes)) public defaultAdapterParams;\r\n\r\n    // Validation\r\n    mapping(uint16 => mapping(uint16 => address)) public inboundProofLibrary; // chainId => library Id => inboundProofLibrary contract\r\n    mapping(uint16 => uint16) public maxInboundProofLibrary; // chainId => inboundProofLibrary\r\n    mapping(uint16 => mapping(uint16 => bool)) public supportedOutboundProof; // chainId => outboundProofType => enabled\r\n    mapping(uint16 => uint) public chainAddressSizeMap;\r\n    mapping(address => mapping(uint16 => mapping(bytes32 => mapping(bytes32 => uint)))) public hashLookup; //[oracle][srcChainId][blockhash][datahash] -> confirmation\r\n    mapping(uint16 => bytes32) public ulnLookup; // remote ulns\r\n\r\n    ILayerZeroEndpoint public immutable endpoint;\r\n    uint16 public immutable localChainId;\r\n    NonceContract public immutable nonceContract;\r\n\r\n    constructor(address _endpoint, address _nonceContract, uint16 _localChainId) {\r\n        require(_endpoint != address(0x0), \"LayerZero: endpoint cannot be zero address\");\r\n        require(_nonceContract != address(0x0), \"LayerZero: nonceContract cannot be zero address\");\r\n        ILayerZeroEndpoint lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n        localChainId = _localChainId;\r\n        endpoint = lzEndpoint;\r\n        nonceContract = NonceContract(_nonceContract);\r\n    }\r\n\r\n    // only the endpoint can call SEND() and setConfig()\r\n    modifier onlyEndpoint() {\r\n        require(address(endpoint) == msg.sender, \"LayerZero: only endpoint\");\r\n        _;\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // PROTOCOL\r\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes32 _blockData, bytes calldata _transactionProof) external override {\r\n    //     // retrieve UA's configuration using the _dstAddress from arguments.\r\n    //     ApplicationConfiguration memory uaConfig = _getAppConfig(_srcChainId, _dstAddress);\r\n\r\n    //     // assert that the caller == UA's relayer\r\n    //     require(uaConfig.relayer == msg.sender, \"LayerZero: invalid relayer\");\r\n\r\n    //     // Mock. Remove validation for test.\r\n    //     LayerZeroPacket.Packet memory _packet;\r\n    //     uint remoteAddressSize = chainAddressSizeMap[_srcChainId];\r\n    //     require(remoteAddressSize != 0, \"LayerZero: incorrect remote address size\");\r\n    //     {\r\n    //         // assert that the data submitted by UA's oracle have no fewer confirmations than UA's configuration\r\n    //         uint storedConfirmations = hashLookup[uaConfig.oracle][_srcChainId][_lookupHash][_blockData];\r\n    //         require(storedConfirmations > 0 && storedConfirmations >= uaConfig.inboundBlockConfirmations, \"LayerZero: not enough block confirmations\");\r\n\r\n    //         // decode\r\n    //         address inboundProofLib = inboundProofLibrary[_srcChainId][uaConfig.inboundProofLibraryVersion];\r\n    //         _packet = ILayerZeroValidationLibrary(inboundProofLib).validateProof(_blockData, _transactionProof, remoteAddressSize);\r\n    //     }\r\n\r\n    //     // packet content assertion\r\n    //     require(ulnLookup[_srcChainId] == _packet.ulnAddress && _packet.ulnAddress != bytes32(0), \"LayerZero: invalid _packet.ulnAddress\");\r\n    //     require(_packet.srcChainId == _srcChainId, \"LayerZero: invalid srcChain Id\");\r\n    //     // failsafe because the remoteAddress size being passed into validateProof trims the address this should not hit\r\n    //     require(_packet.srcAddress.length == remoteAddressSize, \"LayerZero: invalid srcAddress size\");\r\n    //     require(_packet.dstChainId == localChainId, \"LayerZero: invalid dstChain Id\");\r\n    //     require(_packet.dstAddress == _dstAddress, \"LayerZero: invalid dstAddress\");\r\n\r\n    //     // if the dst is not a contract, then emit and return early. This will break inbound nonces, but this particular\r\n    //     // path is already broken and wont ever be able to deliver anyways\r\n    //     if (!_isContract(_dstAddress)) {\r\n    //         emit InvalidDst(_packet.srcChainId, _packet.srcAddress, _packet.dstAddress, _packet.nonce, keccak256(_packet.payload));\r\n    //         return;\r\n    //     }\r\n\r\n    //     bytes memory pathData = abi.encodePacked(_packet.srcAddress, _packet.dstAddress);\r\n    //     emit PacketReceived(_packet.srcChainId, _packet.srcAddress, _packet.dstAddress, _packet.nonce, keccak256(_packet.payload));\r\n    //     endpoint.receivePayload(_srcChainId, pathData, _dstAddress, _packet.nonce, _gasLimit, _packet.payload);\r\n    }\r\n\r\n    function receivePayload_withNoValidation(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external {\r\n        bytes memory pathData = abi.encodePacked(_srcAddress, _dstAddress);\r\n        endpoint.receivePayload(_srcChainId, pathData, _dstAddress, _nonce, _gasLimit, _payload);\r\n    }\r\n\r\n    function send(address _ua, uint64, uint16 _dstChainId, bytes calldata _path, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable override onlyEndpoint {\r\n        address ua = _ua;\r\n        uint16 dstChainId = _dstChainId;\r\n        require(ulnLookup[dstChainId] != bytes32(0), \"LayerZero: dstChainId does not exist\");\r\n\r\n        bytes memory dstAddress;\r\n        uint64 nonce;\r\n        // code block for solving 'Stack Too Deep'\r\n        {\r\n            uint chainAddressSize = chainAddressSizeMap[dstChainId];\r\n            // path = remoteAddress + localAddress\r\n            require(chainAddressSize != 0 && _path.length == 20 + chainAddressSize, \"LayerZero: incorrect remote address size\");\r\n            address srcInPath;\r\n            bytes memory path = _path; // copy to memory\r\n            assembly {\r\n                srcInPath := mload(add(add(path, 20), chainAddressSize)) // chainAddressSize + 20\r\n            }\r\n            require(ua == srcInPath, \"LayerZero: wrong path data\");\r\n            dstAddress = _path[0:chainAddressSize];\r\n            nonce = nonceContract.increment(dstChainId, ua, path);\r\n        }\r\n\r\n        bytes memory payload = _payload;\r\n        ApplicationConfiguration memory uaConfig = _getAppConfig(dstChainId, ua);\r\n\r\n        // compute all the fees\r\n        uint relayerFee = _handleRelayer(dstChainId, uaConfig, ua, payload.length, _adapterParams);\r\n        uint oracleFee = 0; //_handleOracle(dstChainId, uaConfig, ua);\r\n        uint nativeProtocolFee = _handleProtocolFee(relayerFee, oracleFee, ua, _zroPaymentAddress);\r\n\r\n        // total native fee, does not include ZRO protocol fee\r\n        uint totalNativeFee = relayerFee.add(oracleFee).add(nativeProtocolFee);\r\n\r\n        // assert the user has attached enough native token for this address\r\n        require(totalNativeFee <= msg.value, \"LayerZero: not enough native for fees\");\r\n        // refund if they send too much\r\n        uint amount = msg.value.sub(totalNativeFee);\r\n        if (amount > 0) {\r\n            (bool success, ) = _refundAddress.call{value: amount}(\"\");\r\n            require(success, \"LayerZero: failed to refund\");\r\n        }\r\n\r\n        // emit the data packet\r\n        bytes memory encodedPayload = abi.encodePacked(nonce, localChainId, ua, dstChainId, dstAddress, payload);\r\n        emit Packet(encodedPayload);\r\n    }\r\n\r\n    function _handleRelayer(uint16 _dstChainId, ApplicationConfiguration memory _uaConfig, address _ua, uint _payloadSize, bytes memory _adapterParams) internal returns (uint relayerFee) {\r\n        if (_adapterParams.length == 0) {\r\n            _adapterParams = defaultAdapterParams[_dstChainId][_uaConfig.outboundProofType];\r\n        }\r\n        address relayerAddress = _uaConfig.relayer;\r\n        ILayerZeroRelayerV2 relayer = ILayerZeroRelayerV2(relayerAddress);\r\n        relayerFee = relayer.assignJob(_dstChainId, _uaConfig.outboundProofType, _ua, _payloadSize, _adapterParams);\r\n\r\n        _creditNativeFee(relayerAddress, relayerFee);\r\n\r\n        // emit the param events\r\n        emit RelayerParams(_adapterParams, _uaConfig.outboundProofType);\r\n    }\r\n\r\n    // function _handleOracle(uint16 _dstChainId, ApplicationConfiguration memory _uaConfig, address _ua) internal returns (uint oracleFee) {\r\n    //     address oracleAddress = _uaConfig.oracle;\r\n    //     oracleFee = ILayerZeroOracleV2(oracleAddress).assignJob(_dstChainId, _uaConfig.outboundProofType, _uaConfig.outboundBlockConfirmations, _ua);\r\n\r\n    //     _creditNativeFee(oracleAddress, oracleFee);\r\n    // }\r\n\r\n    function _handleProtocolFee(uint _relayerFee, uint _oracleFee, address _ua, address _zroPaymentAddress) internal returns (uint protocolNativeFee) {\r\n        // if no ZRO token or not specifying a payment address, pay in native token\r\n        bool payInNative = _zroPaymentAddress == address(0x0) || address(layerZeroToken) == address(0x0);\r\n        uint protocolFee = treasuryContract.getFees(!payInNative, _relayerFee, _oracleFee);\r\n\r\n        if (protocolFee > 0) {\r\n            if (payInNative) {\r\n                address treasuryAddress = address(treasuryContract);\r\n                _creditNativeFee(treasuryAddress, protocolFee);\r\n                protocolNativeFee = protocolFee;\r\n            } else {\r\n                // zro payment address must equal the ua or the tx.origin otherwise the transaction reverts\r\n                require(_zroPaymentAddress == _ua || _zroPaymentAddress == tx.origin, \"LayerZero: must be paid by sender or origin\");\r\n\r\n                // transfer the LayerZero token to this contract from the payee\r\n                layerZeroToken.safeTransferFrom(_zroPaymentAddress, address(this), protocolFee);\r\n\r\n                treasuryZROFees = treasuryZROFees.add(protocolFee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _creditNativeFee(address _receiver, uint _amount) internal {\r\n        nativeFees[_receiver] = nativeFees[_receiver].add(_amount);\r\n    }\r\n\r\n    // Can be called by any address to update a block header\r\n    // can only upload new block data or the same block data with more confirmations\r\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external override {\r\n        uint storedConfirmations = hashLookup[msg.sender][_srcChainId][_lookupHash][_blockData];\r\n\r\n        // if it has a record, requires a larger confirmation.\r\n        require(storedConfirmations < _confirmations, \"LayerZero: oracle data can only update if it has more confirmations\");\r\n\r\n        // set the new information into storage\r\n        hashLookup[msg.sender][_srcChainId][_lookupHash][_blockData] = _confirmations;\r\n\r\n        emit HashReceived(_srcChainId, msg.sender, _lookupHash, _blockData, _confirmations);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // Other Library Interfaces\r\n\r\n    // default to DEFAULT setting if ZERO value\r\n    function getAppConfig(uint16 _remoteChainId, address _ua) external view override returns (ApplicationConfiguration memory) {\r\n        return _getAppConfig(_remoteChainId, _ua);\r\n    }\r\n\r\n    function _getAppConfig(uint16 _remoteChainId, address _ua) internal view returns (ApplicationConfiguration memory) {\r\n        ApplicationConfiguration memory config = appConfig[_ua][_remoteChainId];\r\n        ApplicationConfiguration storage defaultConfig = defaultAppConfig[_remoteChainId];\r\n\r\n        if (config.inboundProofLibraryVersion == 0) {\r\n            config.inboundProofLibraryVersion = defaultConfig.inboundProofLibraryVersion;\r\n        }\r\n\r\n        if (config.inboundBlockConfirmations == 0) {\r\n            config.inboundBlockConfirmations = defaultConfig.inboundBlockConfirmations;\r\n        }\r\n\r\n        if (config.relayer == address(0x0)) {\r\n            config.relayer = defaultConfig.relayer;\r\n        }\r\n\r\n        if (config.outboundProofType == 0) {\r\n            config.outboundProofType = defaultConfig.outboundProofType;\r\n        }\r\n\r\n        if (config.outboundBlockConfirmations == 0) {\r\n            config.outboundBlockConfirmations = defaultConfig.outboundBlockConfirmations;\r\n        }\r\n\r\n        if (config.oracle == address(0x0)) {\r\n            config.oracle = defaultConfig.oracle;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function setConfig(uint16 _remoteChainId, address _ua, uint _configType, bytes calldata _config) external override onlyEndpoint {\r\n        ApplicationConfiguration storage uaConfig = appConfig[_ua][_remoteChainId];\r\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\r\n            uint16 inboundProofLibraryVersion = abi.decode(_config, (uint16));\r\n            require(inboundProofLibraryVersion <= maxInboundProofLibrary[_remoteChainId], \"LayerZero: invalid inbound proof library version\");\r\n            uaConfig.inboundProofLibraryVersion = inboundProofLibraryVersion;\r\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\r\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\r\n            uaConfig.inboundBlockConfirmations = blockConfirmations;\r\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\r\n            address relayer = abi.decode(_config, (address));\r\n            uaConfig.relayer = relayer;\r\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\r\n            uint16 outboundProofType = abi.decode(_config, (uint16));\r\n            require(supportedOutboundProof[_remoteChainId][outboundProofType] || outboundProofType == 0, \"LayerZero: invalid outbound proof type\");\r\n            uaConfig.outboundProofType = outboundProofType;\r\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\r\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\r\n            uaConfig.outboundBlockConfirmations = blockConfirmations;\r\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\r\n            address oracle = abi.decode(_config, (address));\r\n            uaConfig.oracle = oracle;\r\n        } else {\r\n            revert(\"LayerZero: Invalid config type\");\r\n        }\r\n\r\n        emit AppConfigUpdated(_ua, _configType, _config);\r\n    }\r\n\r\n    function getConfig(uint16 _remoteChainId, address _ua, uint _configType) external view override returns (bytes memory) {\r\n        ApplicationConfiguration storage uaConfig = appConfig[_ua][_remoteChainId];\r\n\r\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\r\n            if (uaConfig.inboundProofLibraryVersion == 0) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].inboundProofLibraryVersion);\r\n            }\r\n            return abi.encode(uaConfig.inboundProofLibraryVersion);\r\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\r\n            if (uaConfig.inboundBlockConfirmations == 0) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].inboundBlockConfirmations);\r\n            }\r\n            return abi.encode(uaConfig.inboundBlockConfirmations);\r\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\r\n            if (uaConfig.relayer == address(0x0)) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].relayer);\r\n            }\r\n            return abi.encode(uaConfig.relayer);\r\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\r\n            if (uaConfig.outboundProofType == 0) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].outboundProofType);\r\n            }\r\n            return abi.encode(uaConfig.outboundProofType);\r\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\r\n            if (uaConfig.outboundBlockConfirmations == 0) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].outboundBlockConfirmations);\r\n            }\r\n            return abi.encode(uaConfig.outboundBlockConfirmations);\r\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\r\n            if (uaConfig.oracle == address(0x0)) {\r\n                return abi.encode(defaultAppConfig[_remoteChainId].oracle);\r\n            }\r\n            return abi.encode(uaConfig.oracle);\r\n        } else {\r\n            revert(\"LayerZero: Invalid config type\");\r\n        }\r\n    }\r\n\r\n    // returns the native fee the UA pays to cover fees\r\n    function estimateFees(uint16 _dstChainId, address _ua, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParams) external view override returns (uint nativeFee, uint zroFee) {\r\n        ApplicationConfiguration memory uaConfig = _getAppConfig(_dstChainId, _ua);\r\n\r\n        // Relayer Fee\r\n        bytes memory adapterParams;\r\n        if (_adapterParams.length > 0) {\r\n            adapterParams = _adapterParams;\r\n        } else {\r\n            adapterParams = defaultAdapterParams[_dstChainId][uaConfig.outboundProofType];\r\n        }\r\n        uint relayerFee = ILayerZeroRelayerV2(uaConfig.relayer).getFee(_dstChainId, uaConfig.outboundProofType, _ua, _payload.length, adapterParams);\r\n\r\n        // Oracle Fee\r\n        address ua = _ua; // stack too deep\r\n        uint oracleFee = 0; //ILayerZeroOracleV2(uaConfig.oracle).getFee(_dstChainId, uaConfig.outboundProofType, uaConfig.outboundBlockConfirmations, ua);\r\n\r\n        // LayerZero Fee\r\n        uint protocolFee = treasuryContract.getFees(_payInZRO, relayerFee, oracleFee);\r\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\r\n\r\n        // return the sum of fees\r\n        nativeFee = nativeFee.add(relayerFee).add(oracleFee);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Claim Fees\r\n\r\n    // universal withdraw ZRO token function\r\n    function withdrawZRO(address _to, uint _amount) external override nonReentrant {\r\n        require(msg.sender == address(treasuryContract), \"LayerZero: only treasury\");\r\n        treasuryZROFees = treasuryZROFees.sub(_amount);\r\n        layerZeroToken.safeTransfer(_to, _amount);\r\n        emit WithdrawZRO(msg.sender, _to, _amount);\r\n    }\r\n\r\n    // universal withdraw native token function.\r\n    // the source contract should perform all the authentication control\r\n    function withdrawNative(address payable _to, uint _amount) external override nonReentrant {\r\n        require(_to != address(0x0), \"LayerZero: _to cannot be zero address\");\r\n        nativeFees[msg.sender] = nativeFees[msg.sender].sub(_amount);\r\n\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        require(success, \"LayerZero: withdraw failed\");\r\n        emit WithdrawNative(msg.sender, _to, _amount);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Owner calls, configuration only.\r\n    function setLayerZeroToken(address _layerZeroToken) external onlyOwner {\r\n        require(_layerZeroToken != address(0x0), \"LayerZero: _layerZeroToken cannot be zero address\");\r\n        layerZeroToken = IERC20(_layerZeroToken);\r\n        emit SetLayerZeroToken(_layerZeroToken);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(_treasury != address(0x0), \"LayerZero: treasury cannot be zero address\");\r\n        treasuryContract = ILayerZeroTreasury(_treasury);\r\n        emit SetTreasury(_treasury);\r\n    }\r\n\r\n    function addInboundProofLibraryForChain(uint16 _chainId, address _library) external onlyOwner {\r\n        require(_library != address(0x0), \"LayerZero: library cannot be zero address\");\r\n        uint16 libId = maxInboundProofLibrary[_chainId];\r\n        require(libId < 65535, \"LayerZero: can not add new library\");\r\n        maxInboundProofLibrary[_chainId] = ++libId;\r\n        inboundProofLibrary[_chainId][libId] = _library;\r\n        emit AddInboundProofLibraryForChain(_chainId, _library);\r\n    }\r\n\r\n    function enableSupportedOutboundProof(uint16 _chainId, uint16 _proofType) external onlyOwner {\r\n        supportedOutboundProof[_chainId][_proofType] = true;\r\n        emit EnableSupportedOutboundProof(_chainId, _proofType);\r\n    }\r\n\r\n    function setDefaultConfigForChainId(uint16 _chainId, uint16 _inboundProofLibraryVersion, uint64 _inboundBlockConfirmations, address _relayer, uint16 _outboundProofType, uint64 _outboundBlockConfirmations, address _oracle) external onlyOwner {\r\n        require(_inboundProofLibraryVersion <= maxInboundProofLibrary[_chainId] && _inboundProofLibraryVersion > 0, \"LayerZero: invalid inbound proof library version\");\r\n        require(_inboundBlockConfirmations > 0, \"LayerZero: invalid inbound block confirmation\");\r\n        require(_relayer != address(0x0), \"LayerZero: invalid relayer address\");\r\n        require(supportedOutboundProof[_chainId][_outboundProofType], \"LayerZero: invalid outbound proof type\");\r\n        require(_outboundBlockConfirmations > 0, \"LayerZero: invalid outbound block confirmation\");\r\n        require(_oracle != address(0x0), \"LayerZero: invalid oracle address\");\r\n        defaultAppConfig[_chainId] = ApplicationConfiguration(_inboundProofLibraryVersion, _inboundBlockConfirmations, _relayer, _outboundProofType, _outboundBlockConfirmations, _oracle);\r\n        emit SetDefaultConfigForChainId(_chainId, _inboundProofLibraryVersion, _inboundBlockConfirmations, _relayer, _outboundProofType, _outboundBlockConfirmations, _oracle);\r\n    }\r\n\r\n    function setDefaultAdapterParamsForChainId(uint16 _chainId, uint16 _proofType, bytes calldata _adapterParams) external onlyOwner {\r\n        defaultAdapterParams[_chainId][_proofType] = _adapterParams;\r\n        emit SetDefaultAdapterParamsForChainId(_chainId, _proofType, _adapterParams);\r\n    }\r\n\r\n    function setRemoteUln(uint16 _remoteChainId, bytes32 _remoteUln) external onlyOwner {\r\n        require(ulnLookup[_remoteChainId] == bytes32(0), \"LayerZero: remote uln already set\");\r\n        ulnLookup[_remoteChainId] = _remoteUln;\r\n        emit SetRemoteUln(_remoteChainId, _remoteUln);\r\n    }\r\n\r\n    function setChainAddressSize(uint16 _chainId, uint _size) external onlyOwner {\r\n        require(chainAddressSizeMap[_chainId] == 0, \"LayerZero: remote chain address size already set\");\r\n        chainAddressSizeMap[_chainId] = _size;\r\n        emit SetChainAddressSize(_chainId, _size);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // view functions\r\n\r\n    function accruedNativeFee(address _address) external view override returns (uint) {\r\n        return nativeFees[_address];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainId, bytes calldata _path) external view override returns (uint64) {\r\n        return nonceContract.outboundNonce(_chainId, _path);\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size != 0;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroTreasury.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroTreasury {\r\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view returns (uint);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroMessagingLibraryV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\nimport \"./ILayerZeroMessagingLibrary.sol\";\r\n\r\ninterface ILayerZeroMessagingLibraryV2 is ILayerZeroMessagingLibrary {\r\n    function getOutboundNonce(uint16 _chainId, bytes calldata _path) external view returns (uint64);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroUltraLightNodeV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\npragma abicoder v2;\r\n\r\ninterface ILayerZeroUltraLightNodeV2 {\r\n    // Relayer functions\r\n    function validateTransactionProof(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _lookupHash, bytes32 _blockData, bytes calldata _transactionProof) external;\r\n\r\n    // an Oracle delivers the block data using updateHash()\r\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\r\n\r\n    // can only withdraw the receivable of the msg.sender\r\n    function withdrawNative(address payable _to, uint _amount) external;\r\n\r\n    function withdrawZRO(address _to, uint _amount) external;\r\n\r\n    // view functions\r\n    function getAppConfig(uint16 _remoteChainId, address _userApplicationAddress) external view returns (ApplicationConfiguration memory);\r\n\r\n    function accruedNativeFee(address _address) external view returns (uint);\r\n\r\n    struct ApplicationConfiguration {\r\n        uint16 inboundProofLibraryVersion;\r\n        uint64 inboundBlockConfirmations;\r\n        address relayer;\r\n        uint16 outboundProofType;\r\n        uint64 outboundBlockConfirmations;\r\n        address oracle;\r\n    }\r\n\r\n    event HashReceived(uint16 indexed srcChainId, address indexed oracle, bytes32 lookupHash, bytes32 blockData, uint confirmations);\r\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\r\n    event Packet(bytes payload);\r\n    event InvalidDst(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\r\n    event PacketReceived(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);\r\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\r\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\r\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\r\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\r\n    event SetDefaultConfigForChainId(uint16 indexed chainId, uint16 inboundProofLib, uint64 inboundBlockConfirm, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirm, address oracle);\r\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\r\n    event SetLayerZeroToken(address indexed tokenAddress);\r\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\r\n    event SetTreasury(address indexed treasuryAddress);\r\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\r\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroRelayerV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface ILayerZeroRelayerV2 {\r\n    // @notice query price and assign jobs at the same time\r\n    // @param _dstChainId - the destination endpoint identifier\r\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\r\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\r\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\r\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\r\n    function assignJob(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external returns (uint price);\r\n\r\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\r\n    // @param _dstChainId - the destination endpoint identifier\r\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\r\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\r\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\r\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\r\n    function getFee(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external view returns (uint price);\r\n\r\n    // @notice withdraw the accrued fee in ultra light node\r\n    // @param _to - the fee receiver\r\n    // @param _amount - the withdrawal amount\r\n    function withdrawFee(address payable _to, uint _amount) external;\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/NonceContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\ncontract NonceContract {\r\n    ILayerZeroEndpoint public immutable endpoint;\r\n    // outboundNonce = [dstChainId][remoteAddress + localAddress]\r\n    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\r\n\r\n    constructor(address _endpoint) {\r\n        endpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function increment(uint16 _chainId, address _ua, bytes calldata _path) external returns (uint64) {\r\n        require(endpoint.getSendLibraryAddress(_ua) == msg.sender, \"NonceContract: msg.sender is not valid sendlibrary\");\r\n        return ++outboundNonce[_chainId][_path];\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroMessagingLibrary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroMessagingLibrary {\r\n    // send(), messages will be inflight.\r\n    function send(address _userApplication, uint64 _lastNonce, uint16 _chainId, bytes calldata _destination, bytes calldata _payload, address payable refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // estimate native fee at the send side\r\n    function estimateFees(uint16 _chainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    //---------------------------------------------------------------------------\r\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\r\n    function setConfig(uint16 _chainId, address _userApplication, uint _configType, bytes calldata _config) external;\r\n\r\n    function getConfig(uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/RelayerV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\r\n\r\nimport \"../../interfaces/ILayerZeroRelayerV2.sol\";\r\nimport \"../../interfaces/ILayerZeroUltraLightNodeV2.sol\";\r\n\r\ncontract RelayerV2 is ReentrancyGuard, OwnableUpgradeable, Proxied, ILayerZeroRelayerV2 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    using SafeMath for uint128;\r\n    using SafeMath for uint64;\r\n\r\n    ILayerZeroUltraLightNodeV2 public uln;\r\n    address public stargateBridgeAddress;\r\n\r\n    struct DstPrice {\r\n        uint128 dstPriceRatio; // 10^10\r\n        uint128 dstGasPriceInWei;\r\n    }\r\n\r\n    struct DstConfig {\r\n        uint128 dstNativeAmtCap;\r\n        uint64 baseGas;\r\n        uint64 gasPerByte;\r\n    }\r\n\r\n    // [_chainId] => DstPriceData. change often\r\n    mapping(uint16 => DstPrice) public dstPriceLookup;\r\n    // [_chainId][_outboundProofType] => DstConfig. change much less often\r\n    mapping(uint16 => mapping(uint16 => DstConfig)) public dstConfigLookup;\r\n    mapping(address => bool) public approvedAddresses;\r\n\r\n    event Withdraw(address to, uint amount);\r\n    event ApproveAddress(address addr, bool approved);\r\n    event AssignJob(uint totalFee);\r\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\r\n    event SetDstPrice(uint16 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\r\n    event SetDstConfig(uint16 chainId, uint16 outboundProofType, uint128 dstNativeAmtCap, uint64 baseGas, uint64 gasPerByte);\r\n\r\n    // new pauseable relayer\r\n    bool public paused;\r\n\r\n    // owner is always approved\r\n    modifier onlyApproved() {\r\n        if (owner() != msg.sender) {\r\n            require(isApproved(msg.sender), \"Relayer: not approved\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function initialize(address _uln) public proxied initializer {\r\n        __Ownable_init();\r\n        uln = ILayerZeroUltraLightNodeV2(_uln);\r\n        setApprovedAddress(address(this), true);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // onlyApproved\r\n\r\n    function setDstPrice(uint16 _chainId, uint128 _dstPriceRatio, uint128 _dstGasPriceInWei) external onlyApproved {\r\n        dstPriceLookup[_chainId] = DstPrice(_dstPriceRatio, _dstGasPriceInWei);\r\n        emit SetDstPrice(_chainId, _dstPriceRatio, _dstGasPriceInWei);\r\n    }\r\n\r\n    function setDstConfig(uint16 _chainId, uint16 _outboundProofType, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external onlyApproved {\r\n        dstConfigLookup[_chainId][_outboundProofType] = DstConfig(_dstNativeAmtCap, _baseGas, _gasPerByte);\r\n        emit SetDstConfig(_chainId, _outboundProofType, _dstNativeAmtCap, _baseGas, _gasPerByte);\r\n    }\r\n\r\n    function setStargateAddress(address _stargateAddress) external onlyApproved {\r\n        stargateBridgeAddress = _stargateAddress;\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------\r\n    // onlyOwner\r\n\r\n    function setApprovedAddress(address _relayerAddress, bool _approve) public onlyOwner {\r\n        approvedAddresses[_relayerAddress] = _approve;\r\n        emit ApproveAddress(_relayerAddress, _approve);\r\n    }\r\n\r\n    function setPause(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    // txType 1\r\n    // bytes  [2       32      ]\r\n    // fields [txType  extraGas]\r\n    // txType 2\r\n    // bytes  [2       32        32            bytes[]         ]\r\n    // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\r\n    // User App Address is not used in this version\r\n    function _getPrices(uint16 _dstChainId, uint16 _outboundProofType, address, bytes memory _adapterParameters) internal view returns (uint basePrice, uint pricePerByte) {\r\n        require(!paused, \"Admin: paused\");\r\n        // decoding the _adapterParameters - reverts if type 2 and there is no dstNativeAddress\r\n        require(_adapterParameters.length == 34 || _adapterParameters.length > 66, \"Relayer: wrong _adapterParameters size\");\r\n        uint16 txType;\r\n        uint extraGas;\r\n        assembly {\r\n            txType := mload(add(_adapterParameters, 2))\r\n            extraGas := mload(add(_adapterParameters, 34))\r\n        }\r\n        require(extraGas > 0, \"Relayer: gas too low\");\r\n        require(txType == 1 || txType == 2, \"Relayer: unsupported txType\");\r\n\r\n        DstPrice storage dstPrice = dstPriceLookup[_dstChainId];\r\n        DstConfig storage dstConfig = dstConfigLookup[_dstChainId][_outboundProofType];\r\n\r\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\r\n        if (txType == 2) {\r\n            uint dstNativeAmt;\r\n            assembly {\r\n                dstNativeAmt := mload(add(_adapterParameters, 66))\r\n            }\r\n            require(dstConfig.dstNativeAmtCap >= dstNativeAmt, \"Relayer: dstNativeAmt too large\");\r\n            totalRemoteToken = totalRemoteToken.add(dstNativeAmt);\r\n        }\r\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\r\n        uint remoteGasTotal = dstPrice.dstGasPriceInWei.mul(dstConfig.baseGas.add(extraGas));\r\n\r\n        totalRemoteToken = totalRemoteToken.add(remoteGasTotal);\r\n\r\n        // tokenConversionRate = dstPrice / localPrice\r\n        // basePrice = totalRemoteToken * tokenConversionRate\r\n        basePrice = totalRemoteToken.mul(dstPrice.dstPriceRatio).div(10**10);\r\n\r\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\r\n        pricePerByte = dstPrice.dstGasPriceInWei.mul(dstConfig.gasPerByte).mul(dstPrice.dstPriceRatio).div(10**10);\r\n    }\r\n\r\n    function getFee(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external view override returns (uint) {\r\n        (uint basePrice, uint pricePerByte) = _getPrices(_dstChainId, _outboundProofType, _userApplication, _adapterParams);\r\n        return basePrice.add(_payloadSize.mul(pricePerByte));\r\n    }\r\n\r\n    function isApproved(address _relayerAddress) public view returns (bool) {\r\n        return approvedAddresses[_relayerAddress];\r\n    }\r\n\r\n    function assignJob(uint16 _dstChainId, uint16 _outboundProofType, address _userApplication, uint _payloadSize, bytes calldata _adapterParams) external override returns (uint) {\r\n        require(msg.sender == address(uln), \"Relayer: invalid uln\");\r\n        (uint basePrice, uint pricePerByte) = _getPrices(_dstChainId, _outboundProofType, _userApplication, _adapterParams);\r\n        uint totalFee = basePrice.add(_payloadSize.mul(pricePerByte));\r\n        emit AssignJob(totalFee);\r\n        return totalFee;\r\n    }\r\n\r\n    function withdrawFee(address payable _to, uint _amount) external override onlyApproved {\r\n        uint totalFee = uln.accruedNativeFee(address(this));\r\n        require(_amount <= totalFee, \"Relayer: not enough fee for withdrawal\");\r\n        uln.withdrawNative(_to, _amount);\r\n    }\r\n\r\n    function validateTransactionProofV2(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes32 _data, bytes calldata _transactionProof, address payable _to) external payable onlyApproved nonReentrant {\r\n        (bool sent, ) = _to.call{value: msg.value}(\"\");\r\n        //require(sent, \"Relayer: failed to send ether\");\r\n        if (!sent) {\r\n            emit ValueTransferFailed(_to, msg.value);\r\n        }\r\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\r\n    }\r\n\r\n    function validateTransactionProofV1(uint16 _srcChainId, address _dstAddress, uint _gasLimit, bytes32 _blockHash, bytes32 _data, bytes calldata _transactionProof) external onlyApproved nonReentrant {\r\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\r\n    }\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/TreasuryV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../interfaces/ILayerZeroTreasury.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../../interfaces/ILayerZeroUltraLightNodeV2.sol\";\r\n\r\ncontract TreasuryV2 is ILayerZeroTreasury, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public nativeBP;\r\n    uint public zroFee;\r\n    bool public feeEnabled;\r\n    bool public zroEnabled;\r\n\r\n    ILayerZeroUltraLightNodeV2 public uln;\r\n\r\n    event NativeBP(uint bp);\r\n    event ZroFee(uint zroFee);\r\n    event FeeEnabled(bool feeEnabled);\r\n    event ZroEnabled(bool zroEnabled);\r\n\r\n    constructor(address _ulnv2) {\r\n        uln = ILayerZeroUltraLightNodeV2(_ulnv2);\r\n    }\r\n\r\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view override returns (uint) {\r\n        if (feeEnabled) {\r\n            if (payInZro) {\r\n                require(zroEnabled, \"LayerZero: ZRO is not enabled\");\r\n                return zroFee;\r\n            } else {\r\n                return relayerFee.add(oracleFee).mul(nativeBP).div(10000);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setFeeEnabled(bool _feeEnabled) external onlyOwner {\r\n        feeEnabled = _feeEnabled;\r\n        emit FeeEnabled(_feeEnabled);\r\n    }\r\n\r\n    function setZroEnabled(bool _zroEnabled) external onlyOwner {\r\n        zroEnabled = _zroEnabled;\r\n        emit ZroEnabled(_zroEnabled);\r\n    }\r\n\r\n    function setNativeBP(uint _nativeBP) external onlyOwner {\r\n        nativeBP = _nativeBP;\r\n        emit NativeBP(_nativeBP);\r\n    }\r\n\r\n    function setZroFee(uint _zroFee) external onlyOwner {\r\n        zroFee = _zroFee;\r\n        emit ZroFee(_zroFee);\r\n    }\r\n\r\n    function withdrawZROFromULN(address _to, uint _amount) external onlyOwner {\r\n        uln.withdrawZRO(_to, _amount);\r\n    }\r\n\r\n    function withdrawNativeFromULN(address payable _to, uint _amount) external onlyOwner {\r\n        uln.withdrawNative(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/StargateComposed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"./interfaces/IStargateRouter.sol\";\r\nimport \"./interfaces/IStargateReceiver.sol\";\r\n\r\ncontract StargateComposed is IStargateReceiver {\r\n    using SafeMath for uint;\r\n    address public stargateRouter;      // an IStargateRouter instance\r\n    address public ammRouter;           // an IUniswapV2Router02 instance\r\n\r\n    // special token value that indicates the sgReceive() should swap OUT native asset\r\n    address public OUT_TO_NATIVE = 0x0000000000000000000000000000000000000000;\r\n    event ReceivedOnDestination(address token, uint qty);\r\n\r\n    constructor(address _stargateRouter, address _ammRouter) {\r\n        stargateRouter = _stargateRouter;\r\n        ammRouter = _ammRouter;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    // 1. swap native on source chain to native on destination chain (!)\r\n    function swapNativeForNative(\r\n        uint16 dstChainId,                      // Stargate/LayerZero chainId\r\n        address bridgeToken,                    // the address of the native ERC20 to swap() - *must* be the token for the poolId\r\n        uint16 srcPoolId,                       // stargate poolId - *must* be the poolId for the bridgeToken asset\r\n        uint16 dstPoolId,                       // stargate destination poolId\r\n        uint nativeAmountIn,                    // exact amount of native token coming in on source\r\n        address to,                             // the address to send the destination tokens to\r\n        uint amountOutMin,                      // minimum amount of stargatePoolId token to get out of amm router\r\n        uint amountOutMinSg,                    // minimum amount of stargatePoolId token to get out on destination chain\r\n        uint amountOutMinDest,                  // minimum amount of native token to receive on destination\r\n        uint deadline,                          // overall deadline\r\n        address destStargateComposed            // destination contract. it must implement sgReceive()\r\n    ) external payable {\r\n\r\n        require(nativeAmountIn > 0, \"nativeAmountIn must be greater than 0\");\r\n        require(msg.value.sub(nativeAmountIn) > 0, \"stargate requires fee to pay crosschain message\");\r\n\r\n        uint bridgeAmount;\r\n        // using the amm router, swap native into the Stargate pool token, sending the output token to this contract\r\n        {\r\n            // create path[] for amm swap\r\n            address[] memory path = new address[](2);\r\n            path[0] = IUniswapV2Router02(ammRouter).WETH();    // native IN requires that we specify the WETH in path[0]\r\n            path[1] = bridgeToken;                             // the bridge token,\r\n\r\n            uint[] memory amounts = IUniswapV2Router02(ammRouter).swapExactETHForTokens{value:nativeAmountIn}(\r\n                amountOutMin,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n            bridgeAmount = amounts[1];\r\n            require(bridgeAmount > 0, 'error: ammRouter gave us 0 tokens to swap() with stargate');\r\n\r\n            // this contract needs to approve the stargateRouter to spend its path[1] token!\r\n            IERC20(bridgeToken).approve(address(stargateRouter), bridgeAmount);\r\n        }\r\n\r\n        // encode payload data to send to destination contract, which it will handle with sgReceive()\r\n        bytes memory data;\r\n        {\r\n            data = abi.encode(OUT_TO_NATIVE, deadline, amountOutMinDest, to);\r\n        }\r\n\r\n        // Stargate's Router.swap() function sends the tokens to the destination chain.\r\n        IStargateRouter(stargateRouter).swap{value:msg.value.sub(nativeAmountIn)}(\r\n            dstChainId,                                     // the destination chain id\r\n            srcPoolId,                                      // the source Stargate poolId\r\n            dstPoolId,                                      // the destination Stargate poolId\r\n            payable(msg.sender),                            // refund adddress. if msg.sender pays too much gas, return extra eth\r\n            bridgeAmount,                                   // total tokens to send to destination chain\r\n            amountOutMinSg,                                 // minimum\r\n            IStargateRouter.lzTxObj(500000, 0, \"0x\"),       // 500,000 for the sgReceive()\r\n            abi.encodePacked(destStargateComposed),         // destination address, the sgReceive() implementer\r\n            data                                            // bytes payload\r\n        );\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    // sgReceive() - the destination contract must implement this function to receive the tokens and payload\r\n    function sgReceive(uint16 /*_chainId*/, bytes memory /*_srcAddress*/, uint /*_nonce*/, address _token, uint amountLD, bytes memory payload) override external {\r\n        require(msg.sender == address(stargateRouter), \"only stargate router can call sgReceive!\");\r\n\r\n        (address _tokenOut, uint _deadline, uint _amountOutMin, address _toAddr) = abi.decode(payload, (address, uint, uint, address));\r\n\r\n        // so that router can swap our tokens\r\n        IERC20(_token).approve(address(ammRouter), amountLD);\r\n\r\n        uint _toBalancePreTransferOut = address(_toAddr).balance;\r\n\r\n        if(_tokenOut == address(0x0)){\r\n            // they want to get out native tokens\r\n            address[] memory path = new address[](2);\r\n            path[0] = _token;\r\n            path[1] = IUniswapV2Router02(ammRouter).WETH();\r\n\r\n            // use ammRouter to swap incoming bridge token into native tokens\r\n            try IUniswapV2Router02(ammRouter).swapExactTokensForETH(\r\n                amountLD,           // the stable received from stargate at the destination\r\n                _amountOutMin,      // slippage param, min amount native token out\r\n                path,               // path[0]: stabletoken address, path[1]: WETH from sushi router\r\n                _toAddr,            // the address to send the *out* native to\r\n                _deadline           // the unix timestamp deadline\r\n            ) {\r\n                // success, the ammRouter should have sent the eth to them\r\n                emit ReceivedOnDestination(OUT_TO_NATIVE, address(_toAddr).balance.sub(_toBalancePreTransferOut));\r\n            } catch {\r\n                // send transfer _token/amountLD to msg.sender because the swap failed for some reason\r\n                IERC20(_token).transfer(_toAddr, amountLD);\r\n                emit ReceivedOnDestination(_token, amountLD);\r\n            }\r\n\r\n        } else { // they want to get out erc20 tokens\r\n            uint _toAddrTokenBalancePre = IERC20(_tokenOut).balanceOf(_toAddr);\r\n            address[] memory path = new address[](2);\r\n            path[0] = _token;\r\n            path[1] = _tokenOut;\r\n            try IUniswapV2Router02(ammRouter).swapExactTokensForTokens(\r\n                amountLD,           // the stable received from stargate at the destination\r\n                _amountOutMin,      // slippage param, min amount native token out\r\n                path,               // path[0]: stabletoken address, path[1]: WETH from sushi router\r\n                _toAddr,            // the address to send the *out* tokens to\r\n                _deadline           // the unix timestamp deadline\r\n            ) {\r\n                // success, the ammRouter should have sent the eth to them\r\n                emit ReceivedOnDestination(_tokenOut, IERC20(_tokenOut).balanceOf(_toAddr).sub(_toAddrTokenBalancePre));\r\n            } catch {\r\n                // transfer _token/amountLD to msg.sender because the swap failed for some reason.\r\n                // this is not the ideal scenario, but the contract needs to deliver them eth or USDC.\r\n                IERC20(_token).transfer(_toAddr, amountLD);\r\n                emit ReceivedOnDestination(_token, amountLD);\r\n            }\r\n        }\r\n    }\r\n\r\n}"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\ninterface IStargateRouter {\r\n    struct lzTxObj {\r\n        uint256 dstGasForCall;\r\n        uint256 dstNativeAmount;\r\n        bytes dstNativeAddr;\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 _poolId,\r\n        uint256 _amountLD,\r\n        address _to\r\n    ) external;\r\n\r\n    function swap(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        lzTxObj memory _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes calldata _payload\r\n    ) external payable;\r\n\r\n    function redeemRemote(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        uint256 _minAmountLD,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    function instantRedeemLocal(\r\n        uint16 _srcPoolId,\r\n        uint256 _amountLP,\r\n        address _to\r\n    ) external returns (uint256);\r\n\r\n    function redeemLocal(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    function sendCredits(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress\r\n    ) external payable;\r\n\r\n    function quoteLayerZeroFee(\r\n        uint16 _dstChainId,\r\n        uint8 _functionType,\r\n        bytes calldata _toAddress,\r\n        bytes calldata _transferAndCallPayload,\r\n        lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256, uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IStargateReceiver {\r\n    function sgReceive(\r\n        uint16 _chainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        address _token,\r\n        uint256 amountLD,\r\n        bytes memory payload\r\n    ) external;\r\n}\r\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/stargate/StargateSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/IStargateRouter.sol\";\r\nimport \"../interfaces/IStargateReceiver.sol\";\r\nimport \"../interfaces/IStargateWidget.sol\";\r\n\r\n\r\ncontract StargateSwap is IStargateReceiver {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public stargateRouter;      // an IStargateRouter instance\r\n    address public widgetSwap;\r\n    bytes2 public partnerId;\r\n\r\n    event ReceivedOnDestination(address token, uint qty);\r\n\r\n    constructor(address _stargateRouter, address _widgetSwap, bytes2 _partnerId) {\r\n        stargateRouter = _stargateRouter;\r\n        widgetSwap = _widgetSwap;\r\n        partnerId = _partnerId;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    // swap tokens to another chain\r\n    function swap(\r\n        uint qty,\r\n        address bridgeToken,                    // the address of the native ERC20 to swap() - *must* be the token for the poolId\r\n        uint16 dstChainId,                      // Stargate/LayerZero chainId\r\n        uint16 srcPoolId,                       // stargate poolId - *must* be the poolId for the qty asset\r\n        uint16 dstPoolId,                       // stargate destination poolId\r\n        address to,                             // the address to send the destination tokens to\r\n        address destStargateComposed            // destination contract. it must implement sgReceive()\r\n    ) external payable {\r\n        require(msg.value > 0, \"stargate requires a msg.value to pay crosschain message\");\r\n        require(qty > 0, 'error: swap() requires qty > 0');\r\n\r\n        // encode payload data to send to destination contract, which it will handle with sgReceive()\r\n        bytes memory data = abi.encode(to);\r\n\r\n        // this contract calls stargate swap()\r\n        IERC20(bridgeToken).safeTransferFrom(msg.sender, address(this), qty);\r\n        IERC20(bridgeToken).safeApprove(address(stargateRouter), qty);\r\n\r\n        // Stargate's Router.swap() function sends the tokens to the destination chain.\r\n        IStargateRouter(stargateRouter).swap{value:msg.value}(\r\n            dstChainId,                                     // the destination chain id\r\n            srcPoolId,                                      // the source Stargate poolId\r\n            dstPoolId,                                      // the destination Stargate poolId\r\n            payable(msg.sender),                            // refund adddress. if msg.sender pays too much gas, return extra eth\r\n            qty,                                            // total tokens to send to destination chain\r\n            0,                                              // min amount allowed out\r\n            IStargateRouter.lzTxObj(200000, 0, \"0x\"),       // default lzTxObj\r\n            abi.encodePacked(destStargateComposed),         // destination address, the sgReceive() implementer\r\n            data                                            // bytes payload\r\n        );\r\n\r\n        // OPTIONAL... Register the partner id for receiving fees from composing stargate\r\n        IStargateWidget(widgetSwap).partnerSwap(partnerId);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    // sgReceive() - the destination contract must implement this function to receive the tokens and payload\r\n    function sgReceive(uint16 /*_chainId*/, bytes memory /*_srcAddress*/, uint /*_nonce*/, address _token, uint amountLD, bytes memory _payload) override external {\r\n        require(msg.sender == address(stargateRouter), \"only stargate router can call sgReceive!\");\r\n        (address _toAddr) = abi.decode(_payload, (address));\r\n        // send transfer _token/amountLD to _toAddr\r\n        IERC20(_token).transfer(_toAddr, amountLD);\r\n        emit ReceivedOnDestination(_token, amountLD);\r\n    }\r\n\r\n}"
    },
    "contracts/interfaces/IStargateWidget.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/IStargateRouter.sol\";\r\n\r\ninterface IStargateWidget {\r\n    struct FeeObj {\r\n        uint256 tenthBps; // bps is to an extra decimal place\r\n        address feeCollector;\r\n    }\r\n\r\n    event WidgetSwapped(bytes2 indexed partnerId, uint256 tenthBps, uint256 widgetFee);\r\n    event PartnerSwap(bytes2 indexed partnerId);\r\n\r\n    function partnerSwap(bytes2 _partnerId) external;\r\n\r\n    function swapTokens(\r\n        uint16 _dstChainId,\r\n        uint16 _srcPoolId,\r\n        uint16 _dstPoolId,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        IStargateRouter.lzTxObj calldata _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes2 _partnerId,\r\n        FeeObj calldata _feeObj\r\n    ) external payable;\r\n\r\n\r\n    function swapETH(\r\n        uint16 _dstChainId,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        bytes calldata _to,\r\n        bytes2 _partnerId,\r\n        FeeObj calldata _feeObj\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/interfaces/IStargateFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./IStargatePool.sol\";\r\n\r\ninterface IStargateFactory {\r\n    function getPool(uint256 _srcPoolId) external returns (IStargatePool);\r\n}\r\n"
    },
    "contracts/interfaces/IStargatePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.4;\r\n\r\ninterface IStargatePool {\r\n    function token() external returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IStargateRouterETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\ninterface IStargateRouterETH {\r\n    function addLiquidityETH() external payable;\r\n\r\n    function swapETH(\r\n        uint16 dstChainId,\r\n        address payable refundAddress,\r\n        bytes calldata to,\r\n        uint256 amountLD,\r\n        uint256 minAmountLD\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/util/LayerZeroPacket.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Buffer.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nlibrary LayerZeroPacket {\r\n    using Buffer for Buffer.buffer;\r\n    // using SafeMath for uint;\r\n\r\n    struct Packet {\r\n        uint16 srcChainId;\r\n        uint16 dstChainId;\r\n        uint64 nonce;\r\n        address dstAddress;\r\n        bytes srcAddress;\r\n        bytes32 ulnAddress;\r\n        bytes payload;\r\n    }\r\n\r\n    function getPacket(\r\n        bytes memory data,\r\n        uint16 srcChain,\r\n        uint sizeOfSrcAddress,\r\n        bytes32 ulnAddress\r\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\r\n        uint16 dstChainId;\r\n        address dstAddress;\r\n        uint size;\r\n        uint64 nonce;\r\n\r\n        // The log consists of the destination chain id and then a bytes payload\r\n        //      0--------------------------------------------31\r\n        // 0   |  total bytes size\r\n        // 32  |  destination chain id\r\n        // 64  |  bytes offset\r\n        // 96  |  bytes array size\r\n        // 128 |  payload\r\n        assembly {\r\n            dstChainId := mload(add(data, 32))\r\n            size := mload(add(data, 96)) /// size of the byte array\r\n            nonce := mload(add(data, 104)) // offset to convert to uint64  128  is index -24\r\n            dstAddress := mload(add(data, sub(add(128, sizeOfSrcAddress), 4))) // offset to convert to address 12 -8\r\n        }\r\n\r\n        Buffer.buffer memory srcAddressBuffer;\r\n        srcAddressBuffer.init(sizeOfSrcAddress);\r\n        srcAddressBuffer.writeRawBytes(0, data, 136, sizeOfSrcAddress); // 128 + 8\r\n\r\n        uint payloadSize = size - 28 - sizeOfSrcAddress;\r\n        Buffer.buffer memory payloadBuffer;\r\n        payloadBuffer.init(payloadSize);\r\n        payloadBuffer.writeRawBytes(0, data, sizeOfSrcAddress + 156, payloadSize); // 148 + 8\r\n        return LayerZeroPacket.Packet(srcChain, dstChainId, nonce, dstAddress, srcAddressBuffer.buf, ulnAddress, payloadBuffer.buf);\r\n    }\r\n\r\n    function getPacketV2(\r\n        bytes memory data,\r\n        uint sizeOfSrcAddress,\r\n        bytes32 ulnAddress\r\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\r\n        // packet def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\r\n        // data def: abi.encode(packet) = offset(32) + length(32) + packet\r\n        //              if from EVM\r\n        // 0 - 31       0 - 31          |  total bytes size\r\n        // 32 - 63      32 - 63         |  location\r\n        // 64 - 95      64 - 95         |  size of the packet\r\n        // 96 - 103     96 - 103        |  nonce\r\n        // 104 - 105    104 - 105       |  srcChainId\r\n        // 106 - P      106 - 125       |  srcAddress, where P = 106 + sizeOfSrcAddress - 1,\r\n        // P+1 - P+2    126 - 127       |  dstChainId\r\n        // P+3 - P+22   128 - 147       |  dstAddress\r\n        // P+23 - END   148 - END       |  payload\r\n\r\n        // decode the packet\r\n        uint256 realSize;\r\n        uint64 nonce;\r\n        uint16 srcChain;\r\n        uint16 dstChain;\r\n        address dstAddress;\r\n        assembly {\r\n            realSize := mload(add(data, 64))\r\n            nonce := mload(add(data, 72)) // 104 - 32\r\n            srcChain := mload(add(data, 74)) // 106 - 32\r\n            dstChain := mload(add(data, add(76, sizeOfSrcAddress))) // P + 3 - 32 = 105 + size + 3 - 32 = 76 + size\r\n            dstAddress := mload(add(data, add(96, sizeOfSrcAddress))) // P + 23 - 32 = 105 + size + 23 - 32 = 96 + size\r\n        }\r\n\r\n        require(srcChain != 0, \"LayerZeroPacket: invalid packet\");\r\n\r\n        Buffer.buffer memory srcAddressBuffer;\r\n        srcAddressBuffer.init(sizeOfSrcAddress);\r\n        srcAddressBuffer.writeRawBytes(0, data, 106, sizeOfSrcAddress);\r\n\r\n        uint nonPayloadSize = sizeOfSrcAddress + 32;// 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\r\n        uint payloadSize = realSize - nonPayloadSize;\r\n        Buffer.buffer memory payloadBuffer;\r\n        payloadBuffer.init(payloadSize);\r\n        payloadBuffer.writeRawBytes(0, data, nonPayloadSize + 96, payloadSize);\r\n\r\n        return LayerZeroPacket.Packet(srcChain, dstChain, nonce, dstAddress, srcAddressBuffer.buf, ulnAddress, payloadBuffer.buf);\r\n    }\r\n\r\n    function getPacketV3(\r\n        bytes memory data,\r\n        uint sizeOfSrcAddress,\r\n        bytes32 ulnAddress\r\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\r\n        // data def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\r\n        //              if from EVM\r\n        // 0 - 31       0 - 31          |  total bytes size\r\n        // 32 - 39      32 - 39         |  nonce\r\n        // 40 - 41      40 - 41         |  srcChainId\r\n        // 42 - P       42 - 61         |  srcAddress, where P = 41 + sizeOfSrcAddress,\r\n        // P+1 - P+2    62 - 63         |  dstChainId\r\n        // P+3 - P+22   64 - 83         |  dstAddress\r\n        // P+23 - END   84 - END        |  payload\r\n\r\n        // decode the packet\r\n        uint256 realSize = data.length;\r\n        uint nonPayloadSize = sizeOfSrcAddress + 32;// 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\r\n        require(realSize >= nonPayloadSize, \"LayerZeroPacket: invalid packet\");\r\n        uint payloadSize = realSize - nonPayloadSize;\r\n\r\n        uint64 nonce;\r\n        uint16 srcChain;\r\n        uint16 dstChain;\r\n        address dstAddress;\r\n        assembly {\r\n            nonce := mload(add(data, 8)) // 40 - 32\r\n            srcChain := mload(add(data, 10)) // 42 - 32\r\n            dstChain := mload(add(data, add(12, sizeOfSrcAddress))) // P + 3 - 32 = 41 + size + 3 - 32 = 12 + size\r\n            dstAddress := mload(add(data, add(32, sizeOfSrcAddress))) // P + 23 - 32 = 41 + size + 23 - 32 = 32 + size\r\n        }\r\n\r\n        require(srcChain != 0, \"LayerZeroPacket: invalid packet\");\r\n\r\n        Buffer.buffer memory srcAddressBuffer;\r\n        srcAddressBuffer.init(sizeOfSrcAddress);\r\n        srcAddressBuffer.writeRawBytes(0, data, 42, sizeOfSrcAddress);\r\n\r\n        Buffer.buffer memory payloadBuffer;\r\n        if (payloadSize > 0) {\r\n            payloadBuffer.init(payloadSize);\r\n            payloadBuffer.writeRawBytes(0, data, nonPayloadSize + 32, payloadSize);\r\n        }\r\n\r\n        return LayerZeroPacket.Packet(srcChain, dstChain, nonce, dstAddress, srcAddressBuffer.buf, ulnAddress, payloadBuffer.buf);\r\n    }\r\n}\r\n"
    },
    "contracts/util/Buffer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\n// https://github.com/ensdomains/buffer\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev A library for working with mutable byte buffers in Solidity.\r\n *\r\n * Byte buffers are mutable and expandable, and provide a variety of primitives\r\n * for writing to them. At any time you can fetch a bytes object containing the\r\n * current contents of the buffer. The bytes object should not be stored between\r\n * operations, as it may change due to resizing of the buffer.\r\n */\r\nlibrary Buffer {\r\n    /**\r\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n     *      a capacity. The capacity may be longer than the current value, in\r\n     *      which case it can be extended without the need to allocate more memory.\r\n     */\r\n    struct buffer {\r\n        bytes buf;\r\n        uint capacity;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a buffer with an initial capacity.a co\r\n     * @param buf The buffer to initialize.\r\n     * @param capacity The number of bytes of space to allocate the buffer.\r\n     * @return The buffer, for chaining.\r\n     */\r\n    function init(buffer memory buf, uint capacity) internal pure returns (buffer memory) {\r\n        if (capacity % 32 != 0) {\r\n            capacity += 32 - (capacity % 32);\r\n        }\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(32, add(ptr, capacity)))\r\n        }\r\n        return buf;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The start offset to write to.\r\n     * @param rawData The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeRawBytes(\r\n        buffer memory buf,\r\n        uint off,\r\n        bytes memory rawData,\r\n        uint offData,\r\n        uint len\r\n    ) internal pure returns (buffer memory) {\r\n        if (off + len > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len + off) * 2);\r\n        }\r\n\r\n        uint dest;\r\n        uint src;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Start address = buffer address + offset + sizeof(buffer length)\r\n            dest := add(add(bufptr, 32), off)\r\n            // Update buffer length if we're extending it\r\n            if gt(add(len, off), buflen) {\r\n                mstore(bufptr, add(len, off))\r\n            }\r\n            src := add(rawData, offData)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256**(32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The start offset to write to.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns (buffer memory) {\r\n        require(len <= data.length);\r\n\r\n        if (off + len > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len + off) * 2);\r\n        }\r\n\r\n        uint dest;\r\n        uint src;\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Start address = buffer address + offset + sizeof(buffer length)\r\n            dest := add(add(bufptr, 32), off)\r\n        // Update buffer length if we're extending it\r\n            if gt(add(len, off), buflen) {\r\n                mstore(bufptr, add(len, off))\r\n            }\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256**(32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, data.length);\r\n    }\r\n\r\n    function resize(buffer memory buf, uint capacity) private pure {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(uint a, uint b) private pure returns (uint) {\r\n        if (a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/ProxyOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BaseOFTV2.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ProxyOFTV2 is BaseOFTV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 internal immutable innerToken;\r\n    uint internal immutable ld2sdRate;\r\n\r\n    // total amount is transferred from this chain to other chains, ensuring the total is less than uint64.max in sd\r\n    uint public outboundAmount;\r\n\r\n    constructor(address _token, uint8 _sharedDecimals, address _lzEndpoint) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\r\n        innerToken = IERC20(_token);\r\n\r\n        (bool success, bytes memory data) = _token.staticcall(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        require(success, \"ProxyOFT: failed to get token decimals\");\r\n        uint8 decimals = abi.decode(data, (uint8));\r\n\r\n        require(_sharedDecimals <= decimals, \"ProxyOFT: sharedDecimals must be <= decimals\");\r\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return innerToken.totalSupply() - outboundAmount;\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(innerToken);\r\n    }\r\n\r\n    /************************************************************************\r\n    * internal functions\r\n    ************************************************************************/\r\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\r\n        require(_from == _msgSender(), \"ProxyOFT: owner is not send caller\");\r\n\r\n        _amount = _transferFrom(_from, address(this), _amount);\r\n\r\n        // _amount still may have dust if the token has transfer fee, then give the dust back to the sender\r\n        (uint amount, uint dust) = _removeDust(_amount);\r\n        if (dust > 0) innerToken.safeTransfer(_from, dust);\r\n\r\n        // check total outbound amount\r\n        outboundAmount += amount;\r\n        uint cap = _sd2ld(type(uint64).max);\r\n        require(cap >= outboundAmount, \"ProxyOFT: outboundAmount overflow\");\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\r\n        outboundAmount -= _amount;\r\n\r\n        // tokens are already in this contract, so no need to transfer\r\n        if (_toAddress == address(this)) {\r\n            return _amount;\r\n        }\r\n\r\n        return _transferFrom(address(this), _toAddress, _amount);\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\r\n        uint before = innerToken.balanceOf(_to);\r\n        if (_from == address(this)) {\r\n            innerToken.safeTransfer(_to, _amount);\r\n        } else {\r\n            innerToken.safeTransferFrom(_from, _to, _amount);\r\n        }\r\n        return innerToken.balanceOf(_to) - before;\r\n    }\r\n\r\n    function _ld2sdRate() internal view virtual override returns (uint) {\r\n        return ld2sdRate;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/BaseOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./OFTCoreV2.sol\";\r\nimport \"./IOFTV2.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\r\n\r\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\r\n    }\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\r\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\r\n    }\r\n\r\n    /************************************************************************\r\n    * public view functions\r\n    ************************************************************************/\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint);\r\n\r\n    function token() public view virtual override returns (address);\r\n}\r\n"
    },
    "contracts/token/oft/v2/OFTCoreV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../../lzApp/NonblockingLzApp.sol\";\r\nimport \"../../../util/ExcessivelySafeCall.sol\";\r\nimport \"./ICommonOFT.sol\";\r\nimport \"./IOFTReceiverV2.sol\";\r\n\r\nabstract contract OFTCoreV2 is NonblockingLzApp {\r\n    using BytesLib for bytes;\r\n    using ExcessivelySafeCall for address;\r\n\r\n    uint public constant NO_EXTRA_GAS = 0;\r\n\r\n    // packet type\r\n    uint8 public constant PT_SEND = 0;\r\n    uint8 public constant PT_SEND_AND_CALL = 1;\r\n\r\n    uint8 public immutable sharedDecimals;\r\n\r\n    bool public useCustomAdapterParams;\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\r\n\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n\r\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\r\n\r\n    event NonContractAddress(address _address);\r\n\r\n    // _sharedDecimals should be the minimum decimals on all chains\r\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\r\n        sharedDecimals = _sharedDecimals;\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\r\n        require(_msgSender() == address(this), \"OFTCore: caller must be OFTCore\");\r\n\r\n        // send\r\n        _amount = _transferFrom(address(this), _to, _amount);\r\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\r\n\r\n        // call\r\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\r\n    }\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    /************************************************************************\r\n    * internal functions\r\n    ************************************************************************/\r\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for sendFrom()\r\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for sendAndCall()\r\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        uint8 packetType = _payload.toUint8(0);\r\n\r\n        if (packetType == PT_SEND) {\r\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n        } else if (packetType == PT_SEND_AND_CALL) {\r\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n        } else {\r\n            revert(\"OFTCore: unknown packet type\");\r\n        }\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\r\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\r\n\r\n        (amount,) = _removeDust(_amount);\r\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\r\n        require(amount > 0, \"OFTCore: amount too small\");\r\n\r\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\r\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n\r\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\r\n    }\r\n\r\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\r\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\r\n        if (to == address(0)) {\r\n            to = address(0xdead);\r\n        }\r\n\r\n        uint amount = _sd2ld(amountSD);\r\n        amount = _creditTo(_srcChainId, to, amount);\r\n\r\n        emit ReceiveFromChain(_srcChainId, to, amount);\r\n    }\r\n\r\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\r\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\r\n\r\n        (amount,) = _removeDust(_amount);\r\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\r\n        require(amount > 0, \"OFTCore: amount too small\");\r\n\r\n        // encode the msg.sender into the payload instead of _from\r\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\r\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n\r\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\r\n    }\r\n\r\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\r\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\r\n\r\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\r\n        uint amount = _sd2ld(amountSD);\r\n\r\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\r\n        if (!credited) {\r\n            amount = _creditTo(_srcChainId, address(this), amount);\r\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\r\n        }\r\n\r\n        if (!_isContract(to)) {\r\n            emit NonContractAddress(to);\r\n            return;\r\n        }\r\n\r\n        // workaround for stack too deep\r\n        uint16 srcChainId = _srcChainId;\r\n        bytes memory srcAddress = _srcAddress;\r\n        uint64 nonce = _nonce;\r\n        bytes memory payload = _payload;\r\n        bytes32 from_ = from;\r\n        address to_ = to;\r\n        uint amount_ = amount;\r\n        bytes memory payloadForCall_ = payloadForCall;\r\n\r\n        // no gas limit for the call if retry\r\n        uint gas = credited ? gasleft() : gasForCall;\r\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\r\n\r\n        if (success) {\r\n            bytes32 hash = keccak256(payload);\r\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\r\n        } else {\r\n            // store the failed message into the nonblockingLzApp\r\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\r\n        }\r\n    }\r\n\r\n    function _isContract(address _account) internal view returns (bool) {\r\n        return _account.code.length > 0;\r\n    }\r\n\r\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\r\n        } else {\r\n            require(_adapterParams.length == 0, \"OFTCore: _adapterParams must be empty.\");\r\n        }\r\n    }\r\n\r\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\r\n        uint amountSD = _amount / _ld2sdRate();\r\n        require(amountSD <= type(uint64).max, \"OFTCore: amountSD overflow\");\r\n        return uint64(amountSD);\r\n    }\r\n\r\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\r\n        return _amountSD * _ld2sdRate();\r\n    }\r\n\r\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\r\n        dust = _amount % _ld2sdRate();\r\n        amountAfter = _amount - dust;\r\n    }\r\n\r\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\r\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\r\n    }\r\n\r\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (address to, uint64 amountSD) {\r\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \"OFTCore: invalid payload\");\r\n\r\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\r\n        amountSD = _payload.toUint64(33);\r\n    }\r\n\r\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            PT_SEND_AND_CALL,\r\n            _toAddress,\r\n            _amountSD,\r\n            _addressToBytes32(_from),\r\n            _dstGasForCall,\r\n            _payload\r\n        );\r\n    }\r\n\r\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\r\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \"OFTCore: invalid payload\");\r\n\r\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\r\n        amountSD = _payload.toUint64(33);\r\n        from = _payload.toBytes32(41);\r\n        dstGasForCall = _payload.toUint64(73);\r\n        payload = _payload.slice(81, _payload.length - 81);\r\n    }\r\n\r\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\r\n        return bytes32(uint(uint160(_address)));\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\r\n\r\n    function _ld2sdRate() internal view virtual returns (uint);\r\n}\r\n"
    },
    "contracts/token/oft/v2/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ICommonOFT.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTV2 is ICommonOFT {\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LzApp.sol\";\r\nimport \"../util/ExcessivelySafeCall.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    using ExcessivelySafeCall for address;\r\n\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\r\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\r\n        // try-catch all errors/exceptions\r\n        if (!success) {\r\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\r\n        }\r\n    }\r\n\r\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\r\n    }\r\n}\r\n"
    },
    "contracts/util/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity >=0.7.6;\r\n\r\nlibrary ExcessivelySafeCall {\r\n    uint256 constant LOW_28_MASK =\r\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeCall(\r\n        address _target,\r\n        uint256 _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint256 _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := call(\r\n            _gas, // gas\r\n            _target, // recipient\r\n            0, // ether value\r\n            add(_calldata, 0x20), // inloc\r\n            mload(_calldata), // inlen\r\n            0, // outloc\r\n            0 // outlen\r\n            )\r\n        // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n        // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n        // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeStaticCall(\r\n        address _target,\r\n        uint256 _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal view returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint256 _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := staticcall(\r\n            _gas, // gas\r\n            _target, // recipient\r\n            add(_calldata, 0x20), // inloc\r\n            mload(_calldata), // inlen\r\n            0, // outloc\r\n            0 // outlen\r\n            )\r\n        // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n        // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n        // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps function selectors in encoded contract calls\r\n     * @dev Allows reuse of encoded calldata for functions with identical\r\n     * argument types but different names. It simply swaps out the first 4 bytes\r\n     * for the new selector. This function modifies memory in place, and should\r\n     * only be used with caution.\r\n     * @param _newSelector The new 4-byte selector\r\n     * @param _buf The encoded contract args\r\n     */\r\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\r\n    internal\r\n    pure\r\n    {\r\n        require(_buf.length >= 4);\r\n        uint256 _mask = LOW_28_MASK;\r\n        assembly {\r\n        // load the first word of\r\n            let _word := mload(add(_buf, 0x20))\r\n        // mask out the top 4 bytes\r\n        // /x\r\n            _word := and(_word, _mask)\r\n            _word := or(_newSelector, _word)\r\n            mstore(add(_buf, 0x20), _word)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface ICommonOFT is IERC165 {\r\n\r\n    struct LzCallParams {\r\n        address payable refundAddress;\r\n        address zroPaymentAddress;\r\n        bytes adapterParams;\r\n    }\r\n\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev returns the address of the ERC20 token\r\n     */\r\n    function token() external view returns (address);\r\n}\r\n"
    },
    "contracts/token/oft/v2/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IOFTReceiverV2 {\r\n    /**\r\n     * @dev Called by the OFT contract when tokens are received from source chain.\r\n     * @param _srcChainId The chain id of the source chain.\r\n     * @param _srcAddress The address of the OFT token contract on the source chain.\r\n     * @param _nonce The nonce of the transaction on the source chain.\r\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\r\n     * @param _amount The amount of tokens to transfer.\r\n     * @param _payload Additional data with no specified format.\r\n     */\r\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\r\n}\r\n"
    },
    "contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../util/BytesLib.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    using BytesLib for bytes;\r\n\r\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\r\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\r\n\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\r\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\r\n    address public precrime;\r\n\r\n    event SetPrecrime(address precrime);\r\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\r\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\r\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        _checkPayloadSize(_dstChainId, _payload.length);\r\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\r\n        uint providedGasLimit = _getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\r\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\r\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\r\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\r\n        if (payloadSizeLimit == 0) { // use default if not set\r\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\r\n        }\r\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // _path = abi.encodePacked(remoteAddress, localAddress)\r\n    // this function set the trusted path for the cross-chain communication\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _path;\r\n        emit SetTrustedRemote(_srcChainId, _path);\r\n    }\r\n\r\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\r\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\r\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\r\n    }\r\n\r\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\r\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\r\n        require(path.length != 0, \"LzApp: no trusted path record\");\r\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\r\n    }\r\n\r\n    function setPrecrime(address _precrime) external onlyOwner {\r\n        precrime = _precrime;\r\n        emit SetPrecrime(_precrime);\r\n    }\r\n\r\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\r\n        require(_minGas > 0, \"LzApp: invalid minGas\");\r\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\r\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\r\n    }\r\n\r\n    // if the size is 0, it means default size limit\r\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\r\n        payloadSizeLimitLookup[_dstChainId] = _size;\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/util/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nlibrary BytesLib {\r\n    function concat(\r\n        bytes memory _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n        // Get a location of some free memory and store it in tempBytes as\r\n        // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n        // Store the length of the first bytes array at the beginning of\r\n        // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n        // Maintain a memory counter for the current write location in the\r\n        // temp bytes array by adding the 32 bytes for the array length to\r\n        // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n        // Stop copying when the memory counter reaches the length of the\r\n        // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n            // Initialize a copy counter to the start of the _preBytes data,\r\n            // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n            // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n            // Write the _preBytes data into the tempBytes memory 32 bytes\r\n            // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Add the length of _postBytes to the current length of tempBytes\r\n        // and store it as the new length in the first 32 bytes of the\r\n        // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n        // Move the memory counter back from a multiple of 0x20 to the\r\n        // actual end of the _preBytes data.\r\n            mc := end\r\n        // Stop copying when the memory counter reaches the new combined\r\n        // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Update the free-memory pointer by padding our last write location\r\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n        // next 32 byte block, then round down to the nearest multiple of\r\n        // 32. If the sum of the length of the two arrays is zero then add\r\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(0x40, and(\r\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n            not(31) // Round down to the nearest 32 bytes.\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n        // Read the first 32 bytes of _preBytes storage, which is the length\r\n        // of the array. (We don't need to use the offset into the slot\r\n        // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes.slot)\r\n        // Arrays of 31 bytes or less have an even value in their slot,\r\n        // while longer arrays have an odd value. The actual length is\r\n        // the slot divided by two for odd values, and the lowest order\r\n        // byte divided by two for even values.\r\n        // If the slot is even, bitwise and the slot with 255 and divide by\r\n        // two to get the length. If the slot is odd, bitwise and the slot\r\n        // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n        // slength can contain both the length and contents of the array\r\n        // if length < 32 bytes so let's prepare for that\r\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n            // Since the new array still fits in the slot, we just need to\r\n            // update the contents of the slot.\r\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\r\n                sstore(\r\n                _preBytes.slot,\r\n                // all the modifications to the slot are inside this\r\n                // next block\r\n                add(\r\n                // we can just add to the slot contents because the\r\n                // bytes we want to change are the LSBs\r\n                fslot,\r\n                add(\r\n                mul(\r\n                div(\r\n                // load the bytes from memory\r\n                mload(add(_postBytes, 0x20)),\r\n                // zero all bytes to the right\r\n                exp(0x100, sub(32, mlength))\r\n                ),\r\n                // and now shift left the number of bytes to\r\n                // leave space for the length in the slot\r\n                exp(0x100, sub(32, newlength))\r\n                ),\r\n                // increase length by the double of the memory\r\n                // bytes length\r\n                mul(mlength, 2)\r\n                )\r\n                )\r\n                )\r\n            }\r\n            case 1 {\r\n            // The stored value fits in the slot, but the combined value\r\n            // will exceed it.\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // The contents of the _postBytes array start 32 bytes into\r\n            // the structure. Our first read should obtain the `submod`\r\n            // bytes that can fit into the unused space in the last word\r\n            // of the stored array. To get this, we read 32 bytes starting\r\n            // from `submod`, so the data we read overlaps with the array\r\n            // contents by `submod` bytes. Masking the lowest-order\r\n            // `submod` bytes allows us to add that value directly to the\r\n            // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(\r\n                sc,\r\n                add(\r\n                and(\r\n                fslot,\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n                ),\r\n                and(mload(mc), mask)\r\n                )\r\n                )\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n            // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // Copy over the first `submod` bytes of the new data as in\r\n            // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n            // The first word of the slice result is potentially a partial\r\n            // word read from the original array. To read it, we calculate\r\n            // the length of that partial word and start copying that many\r\n            // bytes into the array. The first word we copy will start with\r\n            // data we don't care about, but the last `lengthmod` bytes will\r\n            // land at the beginning of the contents of the new array. When\r\n            // we're done copying, we overwrite the full first word with\r\n            // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n            // The multiplication in the next line is necessary\r\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n            // the following copy loop was copying the origin's length\r\n            // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                // The multiplication in the next line has the same exact purpose\r\n                // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n            //update free-memory pointer\r\n            //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n            //zero out the 32 bytes slice we are about to return\r\n            //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\r\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\r\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\r\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\r\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\r\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\r\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\r\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\r\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n            // cb is a circuit breaker in the for loop since there's\r\n            //  no said feature for inline assembly loops\r\n            // cb = 1 - don't breaker\r\n            // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                // the next line is the loop condition:\r\n                // while(uint256(mc < end) + cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                    // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(\r\n        bytes storage _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        bool success = true;\r\n\r\n        assembly {\r\n        // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes.slot)\r\n        // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n            // slength can contain both the length and contents of the array\r\n            // if length < 32 bytes so let's prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                    // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                        // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                    // cb is a circuit breaker in the for loop since there's\r\n                    //  no said feature for inline assembly loops\r\n                    // cb = 1 - don't breaker\r\n                    // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                    // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes.slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                    // the next line is the loop condition:\r\n                    // while(uint256(mc < end) + cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                            // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/token/onft/ONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT1155Core is NonblockingLzApp, ERC165, IONFT1155Core {\r\n    uint public constant NO_EXTRA_GAS = 0;\r\n    uint16 public constant FUNCTION_TYPE_SEND = 1;\r\n    uint16 public constant FUNCTION_TYPE_SEND_BATCH = 2;\r\n    bool public useCustomAdapterParams;\r\n\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _tokenIds, _amounts, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _sendBatch(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenIds, _amounts);\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        if (_tokenIds.length == 1) {\r\n            if (useCustomAdapterParams) {\r\n                _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, NO_EXTRA_GAS);\r\n            } else {\r\n                require(_adapterParams.length == 0, \"LzApp: _adapterParams must be empty.\");\r\n            }\r\n            _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n            emit SendToChain(_dstChainId, _from, _toAddress, _tokenIds[0], _amounts[0]);\r\n        } else if (_tokenIds.length > 1) {\r\n            if (useCustomAdapterParams) {\r\n                _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND_BATCH, _adapterParams, NO_EXTRA_GAS);\r\n            } else {\r\n                require(_adapterParams.length == 0, \"LzApp: _adapterParams must be empty.\");\r\n            }\r\n            _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n            emit SendBatchToChain(_dstChainId, _from, _toAddress, _tokenIds, _amounts);\r\n        }\r\n    }\r\n\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint[] memory tokenIds, uint[] memory amounts) = abi.decode(_payload, (bytes, uint[], uint[]));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenIds, amounts);\r\n\r\n        if (tokenIds.length == 1) {\r\n            emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds[0], amounts[0]);\r\n        } else if (tokenIds.length > 1) {\r\n            emit ReceiveBatchFromChain(_srcChainId, _srcAddress, toAddress, tokenIds, amounts);\r\n        }\r\n    }\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external onlyOwner {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\r\n        uint[] memory array = new uint[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT1155Core is IERC165 {\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint _tokenId, uint _amount);\r\n    event SendBatchToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint[] _tokenIds, uint[] _amounts);\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint _amount);\r\n    event ReceiveBatchFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds, uint[] _amounts);\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - token Ids to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - tokens Id to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n}\r\n"
    },
    "contracts/token/onft/ONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155.sol\";\r\nimport \"./ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT1155 is ONFT1155Core, ERC1155, IONFT1155 {\r\n    constructor(string memory _uri, address _lzEndpoint) ERC1155(_uri) ONFT1155Core(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, ERC1155, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        address spender = _msgSender();\r\n        require(spender == _from || isApprovedForAll(_from, spender), \"ONFT1155: send caller is not owner nor approved\");\r\n        _burnBatch(_from, _tokenIds, _amounts);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        _mintBatch(_toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT1155 is IONFT1155Core, IERC1155 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/token/oft/extension/PausableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n// allow OFT to pause all cross-chain transactions\r\ncontract PausableOFT is OFT, Pausable {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused returns(uint) {\r\n        return super._debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n    }\r\n\r\n    function pauseSendTokens(bool pause) external onlyOwner {\r\n        pause ? _pause() : _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./IOFT.sol\";\r\nimport \"./OFTCore.sol\";\r\n\r\n// override decimal() function is needed\r\ncontract OFT is OFTCore, ERC20, IOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        _mint(_toAddress, _amount);\r\n        return _amount;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/token/oft/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IOFT is IOFTCore, IERC20 {\r\n\r\n}\r\n"
    },
    "contracts/token/oft/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\r\n    using BytesLib for bytes;\r\n\r\n    uint public constant NO_EXTRA_GAS = 0;\r\n\r\n    // packet type\r\n    uint16 public constant PT_SEND = 0;\r\n\r\n    bool public useCustomAdapterParams;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for sendFrom()\r\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        uint16 packetType;\r\n        assembly {\r\n            packetType := mload(add(_payload, 32))\r\n        }\r\n\r\n        if (packetType == PT_SEND) {\r\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n        } else {\r\n            revert(\"OFTCore: unknown packet type\");\r\n        }\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\r\n\r\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\r\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n\r\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\r\n    }\r\n\r\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\r\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\r\n\r\n        address to = toAddressBytes.toAddress(0);\r\n\r\n        amount = _creditTo(_srcChainId, to, amount);\r\n        emit ReceiveFromChain(_srcChainId, to, amount);\r\n    }\r\n\r\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\r\n        } else {\r\n            require(_adapterParams.length == 0, \"OFTCore: _adapterParams must be empty.\");\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual returns(uint);\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns(uint);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/token/oft/IOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTCore is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev returns the address of the ERC20 token\r\n     */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\r\n\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n}\r\n"
    },
    "contracts/token/oft/extension/NativeOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../OFT.sol\";\r\n\r\ncontract NativeOFT is OFT, ReentrancyGuard {\r\n\r\n    event Deposit(address indexed _dst, uint _amount);\r\n    event Withdrawal(address indexed _src, uint _amount);\r\n\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) public payable virtual override(OFTCore, IOFTCore) {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual override(OFTCore) {\r\n        uint messageFee = _debitFromNative(_from, _dstChainId, _toAddress, _amount);\r\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, _amount);\r\n\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\r\n        } else {\r\n            require(_adapterParams.length == 0, \"NativeOFT: _adapterParams must be empty.\");\r\n        }\r\n\r\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, messageFee);\r\n    }\r\n\r\n    function deposit() public payable {\r\n        _mint(msg.sender, msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint _amount) public nonReentrant {\r\n        require(balanceOf(msg.sender) >= _amount, \"NativeOFT: Insufficient balance.\");\r\n        _burn(msg.sender, _amount);\r\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\r\n        require(success, \"NativeOFT: failed to unwrap\");\r\n        emit Withdrawal(msg.sender, _amount);\r\n    }\r\n\r\n    function _debitFromNative(address _from, uint16, bytes memory, uint _amount) internal returns (uint messageFee) {\r\n        messageFee = msg.sender == _from ? _debitMsgSender(_amount) : _debitMsgFrom(_from, _amount);\r\n    }\r\n\r\n    function _debitMsgSender(uint _amount) internal returns (uint messageFee) {\r\n        uint msgSenderBalance = balanceOf(msg.sender);\r\n\r\n        if (msgSenderBalance < _amount) {\r\n            require(msgSenderBalance + msg.value >= _amount, \"NativeOFT: Insufficient msg.value\");\r\n\r\n            // user can cover difference with additional msg.value ie. wrapping\r\n            uint mintAmount = _amount - msgSenderBalance;\r\n            _mint(address(msg.sender), mintAmount);\r\n\r\n            // update the messageFee to take out mintAmount\r\n            messageFee = msg.value - mintAmount;\r\n        } else {\r\n            messageFee = msg.value;\r\n        }\r\n\r\n        _transfer(msg.sender, address(this), _amount);\r\n        return messageFee;\r\n    }\r\n\r\n    function _debitMsgFrom(address _from, uint _amount) internal returns (uint messageFee) {\r\n        uint msgFromBalance = balanceOf(_from);\r\n\r\n        if (msgFromBalance < _amount) {\r\n            require(msgFromBalance + msg.value >= _amount, \"NativeOFT: Insufficient msg.value\");\r\n\r\n            // user can cover difference with additional msg.value ie. wrapping\r\n            uint mintAmount = _amount - msgFromBalance;\r\n            _mint(address(msg.sender), mintAmount);\r\n\r\n            // transfer the differential amount to the contract\r\n            _transfer(msg.sender, address(this), mintAmount);\r\n\r\n            // overwrite the _amount to take the rest of the balance from the _from address\r\n            _amount = msgFromBalance;\r\n\r\n            // update the messageFee to take out mintAmount\r\n            messageFee = msg.value - mintAmount;\r\n        } else {\r\n            messageFee = msg.value;\r\n        }\r\n\r\n        _spendAllowance(_from, msg.sender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n        return messageFee;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal override(OFT) returns(uint) {\r\n        _burn(address(this), _amount);\r\n        (bool success, ) = _toAddress.call{value: _amount}(\"\");\r\n        require(success, \"NativeOFT: failed to _creditTo\");\r\n        return _amount;\r\n    }\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n}\r\n"
    },
    "contracts/examples/ExampleOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/OFT.sol\";\r\n\r\n/// @title A LayerZero OmnichainFungibleToken example of BasedOFT\r\n/// @notice Use this contract only on the BASE CHAIN. It locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\r\ncontract ExampleOFT is OFT {\r\n    constructor(address _layerZeroEndpoint) OFT(\"ExampleOFT\", \"OFT\", _layerZeroEndpoint) {}\r\n}\r\n"
    },
    "contracts/token/oft/extension/ProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ProxyOFT is OFTCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 internal immutable innerToken;\r\n\r\n    constructor(address _lzEndpoint, address _token) OFTCore(_lzEndpoint) {\r\n        innerToken = IERC20(_token);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return innerToken.totalSupply() - innerToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(innerToken);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        require(_from == _msgSender(), \"ProxyOFT: owner is not send caller\");\r\n        uint before = innerToken.balanceOf(address(this));\r\n        innerToken.safeTransferFrom(_from, address(this), _amount);\r\n        return innerToken.balanceOf(address(this)) - before;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        uint before = innerToken.balanceOf(_toAddress);\r\n        innerToken.safeTransfer(_toAddress, _amount);\r\n        return innerToken.balanceOf(_toAddress) - before;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/composable/ComposableOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFTCore.sol\";\r\nimport \"./IOFTReceiver.sol\";\r\nimport \"./IComposableOFTCore.sol\";\r\nimport \"../../../util/ExcessivelySafeCall.sol\";\r\n\r\nabstract contract ComposableOFTCore is OFTCore, IComposableOFTCore {\r\n    using ExcessivelySafeCall for address;\r\n    using BytesLib for bytes;\r\n\r\n    // packet type\r\n    uint16 public constant PT_SEND_AND_CALL = 1;\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedOFTReceivedMessages;\r\n\r\n    constructor(address _lzEndpoint) OFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IComposableOFTCore).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for sendAndCall()\r\n        bytes memory payload = abi.encode(PT_SEND_AND_CALL, abi.encodePacked(msg.sender), _toAddress, _amount, _payload, _dstGasForCall);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) public payable virtual override {\r\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function retryOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, address _to, uint _amount, bytes calldata _payload) public virtual override {\r\n        bytes32 msgHash = failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(msgHash != bytes32(0), \"ComposableOFTCore: no failed message to retry\");\r\n\r\n        bytes32 hash = keccak256(abi.encode(_from, _to, _amount, _payload));\r\n        require(hash == msgHash, \"ComposableOFTCore: failed message hash mismatch\");\r\n\r\n        delete failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce];\r\n        IOFTReceiver(_to).onOFTReceived(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\r\n        emit RetryOFTReceivedSuccess(hash);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        uint16 packetType;\r\n        assembly {\r\n            packetType := mload(add(_payload, 32))\r\n        }\r\n\r\n        if (packetType == PT_SEND) {\r\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n        } else if (packetType == PT_SEND_AND_CALL) {\r\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n        } else {\r\n            revert(\"ComposableOFTCore: unknown packet type\");\r\n        }\r\n    }\r\n\r\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\r\n\r\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory lzPayload = abi.encode(PT_SEND_AND_CALL, abi.encodePacked(msg.sender), _toAddress, amount, _payload, _dstGasForCall);\r\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n\r\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\r\n    }\r\n\r\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\r\n        (, bytes memory from, bytes memory toAddress, uint amount, bytes memory payload, uint64 gasForCall) = abi.decode(_payload, (uint16, bytes, bytes, uint, bytes, uint64));\r\n\r\n        address to = toAddress.toAddress(0);\r\n\r\n        amount = _creditTo(_srcChainId, to, amount);\r\n        emit ReceiveFromChain(_srcChainId, to, amount);\r\n\r\n        if (!_isContract(to)) {\r\n            emit NonContractAddress(to);\r\n            return;\r\n        }\r\n\r\n        _safeCallOnOFTReceived(_srcChainId, _srcAddress, _nonce, from, to, amount, payload, gasForCall);\r\n    }\r\n\r\n    function _safeCallOnOFTReceived(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _from, address _to, uint _amount, bytes memory _payload, uint _gasForCall) internal virtual {\r\n        (bool success, bytes memory reason) = _to.excessivelySafeCall(_gasForCall, 150, abi.encodeWithSelector(IOFTReceiver.onOFTReceived.selector, _srcChainId, _srcAddress, _nonce, _from, _amount, _payload));\r\n        if (!success) {\r\n            failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(abi.encode(_from, _to, _amount, _payload));\r\n            emit CallOFTReceivedFailure(_srcChainId, _srcAddress, _nonce, _from, _to, _amount, _payload, reason);\r\n        } else {\r\n            bytes32 hash = keccak256(abi.encode(_from, _to, _amount, _payload));\r\n            emit CallOFTReceivedSuccess(_srcChainId, _srcAddress, _nonce, hash);\r\n        }\r\n    }\r\n\r\n    function _isContract(address _account) internal view returns (bool) {\r\n        return _account.code.length > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/composable/IOFTReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IOFTReceiver {\r\n    /**\r\n     * @dev Called by the OFT contract when tokens are received from source chain.\r\n     * @param _srcChainId The chain id of the source chain.\r\n     * @param _srcAddress The address of the OFT token contract on the source chain.\r\n     * @param _nonce The nonce of the transaction on the source chain.\r\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\r\n     * @param _amount The amount of tokens to transfer.\r\n     * @param _payload Additional data with no specified format.\r\n     */\r\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, uint _amount, bytes calldata _payload) external;\r\n}\r\n"
    },
    "contracts/token/oft/composable/IComposableOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"../IOFTCore.sol\";\r\n\r\n/**\r\n * @dev Interface of the composable OFT core standard\r\n */\r\ninterface IComposableOFTCore is IOFTCore {\r\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    function retryOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, address _to, uint _amount, bytes calldata _payload) external;\r\n\r\n    event CallOFTReceivedFailure(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _from, address indexed _to, uint _amount, bytes _payload, bytes _reason);\r\n\r\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\r\n\r\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\r\n\r\n    event NonContractAddress(address _address);\r\n}\r\n"
    },
    "contracts/token/oft/composable/ComposableProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ComposableOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ComposableProxyOFT is ComposableOFTCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 internal immutable innerToken;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ComposableOFTCore(_lzEndpoint) {\r\n        innerToken = IERC20(_proxyToken);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return innerToken.totalSupply() - innerToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(innerToken);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        require(_from == _msgSender(), \"ComposableProxyOFT: owner is not send caller\");\r\n        uint before = innerToken.balanceOf(address(this));\r\n        innerToken.safeTransferFrom(_from, address(this), _amount);\r\n        return innerToken.balanceOf(address(this)) - before;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        uint before = innerToken.balanceOf(_toAddress);\r\n        innerToken.safeTransfer(_toAddress, _amount);\r\n        return innerToken.balanceOf(_toAddress) - before;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/fee/BaseOFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFTCoreV2.sol\";\r\nimport \"./IOFTWithFee.sol\";\r\nimport \"./Fee.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract BaseOFTWithFee is OFTCoreV2, Fee, ERC165, IOFTWithFee {\r\n\r\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) public payable virtual override {\r\n        (_amount,) = _payOFTFee(_from, _dstChainId, _amount);\r\n        _amount = _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\r\n        require(_amount >= _minAmount, \"BaseOFTWithFee: amount is less than minAmount\");\r\n    }\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\r\n        (_amount,) = _payOFTFee(_from, _dstChainId, _amount);\r\n        _amount = _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\r\n        require(_amount >= _minAmount, \"BaseOFTWithFee: amount is less than minAmount\");\r\n    }\r\n\r\n    /************************************************************************\r\n    * public view functions\r\n    ************************************************************************/\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTWithFee).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint);\r\n\r\n    function token() public view virtual override returns (address);\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override (Fee, OFTCoreV2) returns (uint);\r\n}\r\n"
    },
    "contracts/token/oft/v2/fee/IOFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"../ICommonOFT.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTWithFee is ICommonOFT {\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_minAmount` the minimum amount of tokens to receive on dstChain\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\r\n\r\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\r\n}\r\n"
    },
    "contracts/token/oft/v2/fee/Fee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nabstract contract Fee is Ownable {\r\n    uint public constant BP_DENOMINATOR = 10000;\r\n\r\n    mapping(uint16 => FeeConfig) public chainIdToFeeBps;\r\n    uint16 public defaultFeeBp;\r\n    address public feeOwner; // defaults to owner\r\n\r\n    struct FeeConfig {\r\n        uint16 feeBP;\r\n        bool enabled;\r\n    }\r\n\r\n    event SetFeeBp(uint16 dstchainId, bool enabled, uint16 feeBp);\r\n    event SetDefaultFeeBp(uint16 feeBp);\r\n    event SetFeeOwner(address feeOwner);\r\n\r\n    constructor(){\r\n        feeOwner = owner();\r\n    }\r\n\r\n    function setDefaultFeeBp(uint16 _feeBp) public virtual onlyOwner {\r\n        require(_feeBp <= BP_DENOMINATOR, \"Fee: fee bp must be <= BP_DENOMINATOR\");\r\n        defaultFeeBp = _feeBp;\r\n        emit SetDefaultFeeBp(defaultFeeBp);\r\n    }\r\n\r\n    function setFeeBp(uint16 _dstChainId, bool _enabled, uint16 _feeBp) public virtual onlyOwner {\r\n        require(_feeBp <= BP_DENOMINATOR, \"Fee: fee bp must be <= BP_DENOMINATOR\");\r\n        chainIdToFeeBps[_dstChainId] = FeeConfig(_feeBp, _enabled);\r\n        emit SetFeeBp(_dstChainId, _enabled, _feeBp);\r\n    }\r\n\r\n    function setFeeOwner(address _feeOwner) public virtual onlyOwner {\r\n        require(_feeOwner != address(0x0), \"Fee: feeOwner cannot be 0x\");\r\n        feeOwner = _feeOwner;\r\n        emit SetFeeOwner(_feeOwner);\r\n    }\r\n\r\n    function quoteOFTFee(uint16 _dstChainId, uint _amount) public virtual view returns (uint fee) {\r\n        FeeConfig memory config = chainIdToFeeBps[_dstChainId];\r\n        if (config.enabled) {\r\n            fee = _amount * config.feeBP / BP_DENOMINATOR;\r\n        } else if (defaultFeeBp > 0) {\r\n            fee = _amount * defaultFeeBp / BP_DENOMINATOR;\r\n        } else {\r\n            fee = 0;\r\n        }\r\n    }\r\n\r\n    function _payOFTFee(address _from, uint16 _dstChainId, uint _amount) internal virtual returns (uint amount, uint fee) {\r\n        fee = quoteOFTFee(_dstChainId, _amount);\r\n        amount = _amount - fee;\r\n        if (fee > 0) {\r\n            _transferFrom(_from, feeOwner, fee);\r\n        }\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\r\n}\r\n"
    },
    "contracts/token/oft/v2/fee/ProxyOFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BaseOFTWithFee.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ProxyOFTWithFee is BaseOFTWithFee {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 internal immutable innerToken;\r\n    uint internal immutable ld2sdRate;\r\n\r\n    // total amount is transferred from this chain to other chains, ensuring the total is less than uint64.max in sd\r\n    uint public outboundAmount;\r\n\r\n    constructor(address _token, uint8 _sharedDecimals, address _lzEndpoint) BaseOFTWithFee(_sharedDecimals, _lzEndpoint) {\r\n        innerToken = IERC20(_token);\r\n\r\n        (bool success, bytes memory data) = _token.staticcall(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        require(success, \"ProxyOFTWithFee: failed to get token decimals\");\r\n        uint8 decimals = abi.decode(data, (uint8));\r\n\r\n        require(_sharedDecimals <= decimals, \"ProxyOFTWithFee: sharedDecimals must be <= decimals\");\r\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return innerToken.totalSupply() - outboundAmount;\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(innerToken);\r\n    }\r\n\r\n    /************************************************************************\r\n    * internal functions\r\n    ************************************************************************/\r\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\r\n        require(_from == _msgSender(), \"ProxyOFTWithFee: owner is not send caller\");\r\n\r\n        _amount = _transferFrom(_from, address(this), _amount);\r\n\r\n        // _amount still may have dust if the token has transfer fee, then give the dust back to the sender\r\n        (uint amount, uint dust) = _removeDust(_amount);\r\n        if (dust > 0) innerToken.safeTransfer(_from, dust);\r\n\r\n        // check total outbound amount\r\n        outboundAmount += amount;\r\n        uint cap = _sd2ld(type(uint64).max);\r\n        require(cap >= outboundAmount, \"ProxyOFTWithFee: outboundAmount overflow\");\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\r\n        outboundAmount -= _amount;\r\n\r\n        // tokens are already in this contract, so no need to transfer\r\n        if (_toAddress == address(this)) {\r\n            return _amount;\r\n        }\r\n\r\n        return _transferFrom(address(this), _toAddress, _amount);\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\r\n        uint before = innerToken.balanceOf(_to);\r\n        if (_from == address(this)) {\r\n            innerToken.safeTransfer(_to, _amount);\r\n        } else {\r\n            innerToken.safeTransferFrom(_from, _to, _amount);\r\n        }\r\n        return innerToken.balanceOf(_to) - before;\r\n    }\r\n\r\n    function _ld2sdRate() internal view virtual override returns (uint) {\r\n        return ld2sdRate;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/fee/OFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./BaseOFTWithFee.sol\";\r\n\r\ncontract OFTWithFee is BaseOFTWithFee, ERC20 {\r\n\r\n    uint internal immutable ld2sdRate;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTWithFee(_sharedDecimals, _lzEndpoint) {\r\n        uint8 decimals = decimals();\r\n        require(_sharedDecimals <= decimals, \"OFTWithFee: sharedDecimals must be <= decimals\");\r\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    /************************************************************************\r\n    * internal functions\r\n    ************************************************************************/\r\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\r\n        _mint(_toAddress, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\r\n        address spender = _msgSender();\r\n        // if transfer from this contract, no need to check allowance\r\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, _to, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _ld2sdRate() internal view virtual override returns (uint) {\r\n        return ld2sdRate;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/token/oft/extension/GlobalCappedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BasedOFT.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\n\r\n/**\r\n * @dev Extension of {OFT} that adds a global cap to the supply of tokens across all chains.\r\n */\r\ncontract GlobalCappedOFT is BasedOFT, ERC20Capped {\r\n    constructor(string memory _name, string memory _symbol, uint _cap, address _lzEndpoint) BasedOFT(_name, _symbol, _lzEndpoint) ERC20Capped(_cap) {}\r\n\r\n    function _mint(address account, uint amount) internal virtual override(ERC20, ERC20Capped) {\r\n        ERC20Capped._mint(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/extension/BasedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\n\r\ncontract BasedOFT is OFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return totalSupply() - balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        _transfer(address(this), _toAddress, _amount);\r\n        return _amount;\r\n    }\r\n}\r\n"
    },
    "contracts/examples/ExampleBasedOFT20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/extension/BasedOFT.sol\";\r\n\r\n/// @title A LayerZero OmnichainFungibleToken example of BasedOFT\r\n/// @notice Use this contract only on the BASE CHAIN. It locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\r\ncontract ExampleBasedOFT is BasedOFT {\r\n    constructor(address _layerZeroEndpoint, uint _initialSupply) BasedOFT(\"BasedOFT\", \"OFT\", _layerZeroEndpoint) {\r\n        _mint(_msgSender(), _initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// this is a MOCK\r\ncontract MockToken is ERC20 {\r\n    // this is a MOCK\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\r\n        _mint(msg.sender, 1_000_000_000 * 10**18); // mint 1B to deployoooor\r\n    }\r\n\r\n    // this is a MOCK\r\n    function mint(address _to, uint _amount) public {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/mocks/LayerZeroTokenMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract LayerZeroTokenMock is ERC20 {\r\n    constructor() ERC20(\"LayerZeroTokenMock\", \"LZTM\") {\r\n        _mint(msg.sender, 1_000_000 * 10**18);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// this is a MOCK\r\ncontract ERC20Mock is ERC20 {\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\r\n\r\n    function mint(address _to, uint _amount) public {\r\n        _mint(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/v2/OFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./BaseOFTV2.sol\";\r\n\r\ncontract OFTV2 is BaseOFTV2, ERC20 {\r\n\r\n    uint internal immutable ld2sdRate;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\r\n        uint8 decimals = decimals();\r\n        require(_sharedDecimals <= decimals, \"OFT: sharedDecimals must be <= decimals\");\r\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\r\n    }\r\n\r\n    /************************************************************************\r\n    * public functions\r\n    ************************************************************************/\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    /************************************************************************\r\n    * internal functions\r\n    ************************************************************************/\r\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\r\n        _mint(_toAddress, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\r\n        address spender = _msgSender();\r\n        // if transfer from this contract, no need to check allowance\r\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, _to, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _ld2sdRate() internal view virtual override returns (uint) {\r\n        return ld2sdRate;\r\n    }\r\n}\r\n"
    },
    "contracts/examples/ExampleOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/v2/OFTV2.sol\";\r\n\r\n/// @title A LayerZero OmnichainFungibleToken example of BasedOFT\r\n/// @notice Use this contract only on the BASE CHAIN. It locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\r\ncontract ExampleOFTV2 is OFTV2 {\r\n    constructor(address _layerZeroEndpoint, uint _initialSupply, uint8 _sharedDecimals) OFTV2(\"ExampleOFT\", \"OFT\", _sharedDecimals, _layerZeroEndpoint) {\r\n        _mint(_msgSender(), _initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/composable/ComposableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./IComposableOFT.sol\";\r\nimport \"./ComposableOFTCore.sol\";\r\n\r\ncontract ComposableOFT is ComposableOFTCore, ERC20, IComposableOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) ComposableOFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ComposableOFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IComposableOFT).interfaceId || interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function token() public view virtual override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        _mint(_toAddress, _amount);\r\n        return _amount;\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/composable/IComposableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./IComposableOFTCore.sol\";\r\nimport \"../IOFT.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IComposableOFT is IOFT, IComposableOFTCore {\r\n\r\n}\r\n"
    },
    "contracts/token/oft/composable/ComposableBasedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ComposableOFT.sol\";\r\n\r\ncontract ComposableBasedOFT is ComposableOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ComposableOFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return totalSupply() - balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\r\n        _transfer(address(this), _toAddress, _amount);\r\n        return _amount;\r\n    }\r\n}\r\n"
    },
    "contracts/mContracts/MozaicLP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/composable/ComposableOFT.sol\";\r\n\r\n/// @title A LayerZero OmnichainFungibleToken example of BasedOFT\r\n/// @notice Use this contract only on the BASE CHAIN. It locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\r\ncontract MozaicLP is ComposableOFT {\r\n    address public vault;\r\n\r\n    constructor(address _layerZeroEndpoint) ComposableOFT(\"Mozaic Liquidity Provider Token\", \"MLP\", _layerZeroEndpoint) {\r\n    }\r\n\r\n    function setValut(address _vault) onlyOwner external virtual {\r\n        vault = _vault; // No need to require non-zero address. \r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(vault == _msgSender(), \"mLP: caller is not the vault\");\r\n        _;\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) onlyVault  internal virtual override returns(uint) {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) onlyVault internal virtual override returns(uint) {\r\n        _mint(_toAddress, _amount);\r\n        return _amount;\r\n    }\r\n\r\n}"
    },
    "contracts/mocks/OFTStakingMockV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../token/oft/v2/IOFTV2.sol\";\r\nimport \"../token/oft/v2/IOFTReceiverV2.sol\";\r\nimport \"../util/BytesLib.sol\";\r\n\r\n// OFTStakingMock is an example to integrate with OFT. It shows how to send OFT cross chain with a custom payload and\r\n// call a receiver contract on the destination chain when oft is received.\r\ncontract OFTStakingMockV2 is IOFTReceiverV2 {\r\n    using SafeERC20 for IERC20;\r\n    using BytesLib for bytes;\r\n\r\n    uint64 public constant DST_GAS_FOR_CALL = 300000; // estimate gas usage of onOFTReceived()\r\n\r\n    // packet type\r\n    uint8 public constant PT_DEPOSIT_TO_REMOTE_CHAIN = 1;\r\n    // ... other types\r\n\r\n    // variables\r\n    IOFTV2 public oft;\r\n    mapping(uint16 => bytes32) public remoteStakingContracts;\r\n    mapping(address => uint) public balances;\r\n    bool public paused; // for testing try/catch\r\n\r\n    event Deposit(address from, uint amount);\r\n    event Withdrawal(address to, uint amount);\r\n    event DepositToDstChain(address from, uint16 dstChainId, bytes to, uint amountOut);\r\n\r\n    // _oft can be any composable OFT contract, e.g. ComposableOFT, ComposableBasedOFT and ComposableProxyOFT.\r\n    constructor(address _oft) {\r\n        oft = IOFTV2(_oft);\r\n        IERC20(oft.token()).safeApprove(_oft, type(uint).max);\r\n    }\r\n\r\n    function setRemoteStakingContract(uint16 _chainId, bytes32 _stakingContract) external {\r\n        remoteStakingContracts[_chainId] = _stakingContract;\r\n    }\r\n\r\n    function deposit(uint _amount) external payable {\r\n        IERC20(oft.token()).safeTransferFrom(msg.sender, address(this), _amount);\r\n        balances[msg.sender] += _amount;\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        withdrawTo(_amount, msg.sender);\r\n    }\r\n\r\n    function withdrawTo(uint _amount, address _to) public {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] -= _amount;\r\n        IERC20(oft.token()).safeTransfer(_to, _amount);\r\n        emit Withdrawal(msg.sender, _amount);\r\n    }\r\n\r\n    function depositToDstChain(\r\n        uint16 _dstChainId,\r\n        bytes calldata _to, // address of the owner of token on the destination chain\r\n        uint _amount, // amount of token to deposit\r\n        bytes calldata _adapterParams\r\n    ) external payable {\r\n        bytes32 dstStakingContract = remoteStakingContracts[_dstChainId];\r\n        require(dstStakingContract != bytes32(0), \"invalid _dstChainId\");\r\n\r\n        // transfer token from sender to this contract\r\n        // if the oft is not the proxy oft, dont need to transfer token to this contract\r\n        // and call sendAndCall() with the msg.sender (_from) instead of address(this)\r\n        // here we use a common pattern to be compatible with all kinds of composable OFT\r\n        IERC20(oft.token()).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        bytes memory payload = abi.encode(PT_DEPOSIT_TO_REMOTE_CHAIN, _to);\r\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(payable(msg.sender), address(0), _adapterParams);\r\n        oft.sendAndCall{value: msg.value}(address(this), _dstChainId, dstStakingContract, _amount, payload, DST_GAS_FOR_CALL, callParams);\r\n\r\n        emit DepositToDstChain(msg.sender, _dstChainId, _to, _amount);\r\n    }\r\n\r\n    function quoteForDeposit(\r\n        uint16 _dstChainId,\r\n        bytes calldata _to, // address of the owner of token on the destination chain\r\n        uint _amount, // amount of token to deposit\r\n        bytes calldata _adapterParams\r\n    ) public view returns (uint nativeFee, uint zroFee) {\r\n        bytes32 dstStakingContract = remoteStakingContracts[_dstChainId];\r\n        require(dstStakingContract != bytes32(0), \"invalid _dstChainId\");\r\n\r\n        bytes memory payload = abi.encode(PT_DEPOSIT_TO_REMOTE_CHAIN, _to);\r\n        return oft.estimateSendAndCallFee(_dstChainId, dstStakingContract, _amount, payload, DST_GAS_FOR_CALL, false, _adapterParams);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    function onOFTReceived(uint16 _srcChainId, bytes calldata, uint64, bytes32 _from, uint _amount, bytes memory _payload) external override {\r\n        require(!paused, \"paused\"); // for testing safe call\r\n        require(msg.sender == address(oft), \"only oft can call onOFTReceived()\");\r\n        require(_from == remoteStakingContracts[_srcChainId], \"invalid from\");\r\n\r\n        uint8 pkType;\r\n        assembly {\r\n            pkType := mload(add(_payload, 32))\r\n        }\r\n\r\n        if (pkType == PT_DEPOSIT_TO_REMOTE_CHAIN) {\r\n            (, bytes memory toAddrBytes) = abi.decode(_payload, (uint8, bytes));\r\n\r\n            address to = toAddrBytes.toAddress(0);\r\n            balances[to] += _amount;\r\n        } else {\r\n            revert(\"invalid deposit type\");\r\n        }\r\n    }\r\n\r\n    function setPaused(bool _paused) external {\r\n        paused = _paused;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/OFTStakingMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../token/oft/composable/IOFTReceiver.sol\";\r\nimport \"../token/oft/composable/IComposableOFTCore.sol\";\r\nimport \"../util/BytesLib.sol\";\r\n\r\n// OFTStakingMock is an example to integrate with OFT. It shows how to send OFT cross chain with a custom payload and\r\n// call a receiver contract on the destination chain when oft is received.\r\ncontract OFTStakingMock is IOFTReceiver {\r\n    using SafeERC20 for IERC20;\r\n    using BytesLib for bytes;\r\n\r\n    uint64 public constant DST_GAS_FOR_CALL = 300000; // estimate gas usage of onOFTReceived()\r\n\r\n    // packet type\r\n    uint8 public constant PT_DEPOSIT_TO_REMOTE_CHAIN = 1;\r\n    // ... other types\r\n\r\n    // variables\r\n    IComposableOFTCore public oft;\r\n    mapping(uint16 => bytes) public remoteStakingContracts;\r\n    mapping(address => uint) public balances;\r\n    bool public paused; // for testing try/catch\r\n\r\n    event Deposit(address from, uint amount);\r\n    event Withdrawal(address to, uint amount);\r\n    event DepositToDstChain(address from, uint16 dstChainId, bytes to, uint amountOut);\r\n\r\n    // _oft can be any composable OFT contract, e.g. ComposableOFT, ComposableBasedOFT and ComposableProxyOFT.\r\n    constructor(address _oft) {\r\n        oft = IComposableOFTCore(_oft);\r\n        IERC20(oft.token()).safeApprove(_oft, type(uint).max);\r\n    }\r\n\r\n    function setRemoteStakingContract(uint16 _chainId, bytes calldata _stakingContract) external {\r\n        remoteStakingContracts[_chainId] = _stakingContract;\r\n    }\r\n\r\n    function deposit(uint _amount) external payable {\r\n        IERC20(oft.token()).safeTransferFrom(msg.sender, address(this), _amount);\r\n        balances[msg.sender] += _amount;\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        withdrawTo(_amount, msg.sender);\r\n    }\r\n\r\n    function withdrawTo(uint _amount, address _to) public {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] -= _amount;\r\n        IERC20(oft.token()).safeTransfer(_to, _amount);\r\n        emit Withdrawal(msg.sender, _amount);\r\n    }\r\n\r\n    function depositToDstChain(\r\n        uint16 _dstChainId,\r\n        bytes calldata _to, // address of the owner of token on the destination chain\r\n        uint _amount, // amount of token to deposit\r\n        bytes calldata _adapterParams\r\n    ) external payable {\r\n        bytes memory dstStakingContract = remoteStakingContracts[_dstChainId];\r\n        require(keccak256(dstStakingContract) != keccak256(\"\"), \"invalid _dstChainId\");\r\n\r\n        // transfer token from sender to this contract\r\n        // if the oft is not the proxy oft, dont need to transfer token to this contract\r\n        // and call sendAndCall() with the msg.sender (_from) instead of address(this)\r\n        // here we use a common pattern to be compatible with all kinds of composable OFT\r\n        IERC20(oft.token()).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        bytes memory payload = abi.encode(PT_DEPOSIT_TO_REMOTE_CHAIN, _to);\r\n        oft.sendAndCall{value: msg.value}(address(this), _dstChainId, dstStakingContract, _amount, payload, DST_GAS_FOR_CALL, payable(msg.sender), address(0), _adapterParams);\r\n\r\n        emit DepositToDstChain(msg.sender, _dstChainId, _to, _amount);\r\n    }\r\n\r\n    function quoteForDeposit(\r\n        uint16 _dstChainId,\r\n        bytes calldata _to, // address of the owner of token on the destination chain\r\n        uint _amount, // amount of token to deposit\r\n        bytes calldata _adapterParams\r\n    ) public view returns (uint nativeFee, uint zroFee) {\r\n        bytes memory dstStakingContract = remoteStakingContracts[_dstChainId];\r\n        require(keccak256(dstStakingContract) != keccak256(\"\"), \"invalid _dstChainId\");\r\n\r\n        bytes memory payload = abi.encode(PT_DEPOSIT_TO_REMOTE_CHAIN, _to);\r\n        return oft.estimateSendAndCallFee(_dstChainId, dstStakingContract, _amount, payload, DST_GAS_FOR_CALL, false, _adapterParams);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------------------------------\r\n    function onOFTReceived(uint16 _srcChainId, bytes calldata, uint64, bytes calldata _from, uint _amount, bytes memory _payload) external override {\r\n        require(!paused, \"paused\"); // for testing safe call\r\n        require(msg.sender == address(oft), \"only oft can call onOFTReceived()\");\r\n        require(keccak256(_from) == keccak256(remoteStakingContracts[_srcChainId]), \"invalid from\");\r\n\r\n        uint8 pkType;\r\n        assembly {\r\n            pkType := mload(add(_payload, 32))\r\n        }\r\n\r\n        if (pkType == PT_DEPOSIT_TO_REMOTE_CHAIN) {\r\n            (, bytes memory toAddrBytes) = abi.decode(_payload, (uint8, bytes));\r\n\r\n            address to = toAddrBytes.toAddress(0);\r\n            balances[to] += _amount;\r\n        } else {\r\n            revert(\"invalid deposit type\");\r\n        }\r\n    }\r\n\r\n    function setPaused(bool _paused) external {\r\n        paused = _paused;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (uint256)) > 0;\n    }\n}\n"
    },
    "contracts/token/onft/extension/ProxyONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\nimport \"../ONFT721Core.sol\";\r\n\r\ncontract ProxyONFT721 is ONFT721Core, IERC721Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC721 public immutable token;\r\n\r\n    constructor(uint256 _minGasToTransfer, address _lzEndpoint, address _proxyToken) ONFT721Core(_minGasToTransfer, _lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC721).interfaceId), \"ProxyONFT721: invalid ERC721 token\");\r\n        token = IERC721(_proxyToken);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT721: owner is not send caller\");\r\n        token.safeTransferFrom(_from, address(this), _tokenId);\r\n    }\r\n\r\n    // TODO apply same changes from regular ONFT721\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        token.safeTransferFrom(address(this), _toAddress, _tokenId);\r\n    }\r\n\r\n    function onERC721Received(address _operator, address, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to transfer token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/token/onft/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\r\n    uint16 public constant FUNCTION_TYPE_SEND = 1;\r\n\r\n    struct StoredCredit {\r\n        uint16 srcChainId;\r\n        address toAddress;\r\n        uint256 index; // which index of the tokenIds remain\r\n        bool creditsRemain;\r\n    }\r\n\r\n    uint256 public minGasToTransferAndStore; // min amount of gas required to transfer, and also store the payload\r\n    mapping(uint16 => uint256) public dstChainIdToBatchLimit;\r\n    mapping(uint16 => uint256) public dstChainIdToTransferGas; // per transfer amount of gas required to mint/transfer on the dst\r\n    mapping(bytes32 => StoredCredit) public storedCredits;\r\n\r\n    constructor(uint256 _minGasToTransferAndStore, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\r\n        require(_minGasToTransferAndStore > 0, \"ONFT721: minGasToTransferAndStore must be > 0\");\r\n        minGasToTransferAndStore = _minGasToTransferAndStore;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _tokenIds, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        // allow 1 by default\r\n        require(_tokenIds.length > 0, \"LzApp: tokenIds[] is empty\");\r\n        require(_tokenIds.length == 1 || _tokenIds.length <= dstChainIdToBatchLimit[_dstChainId], \"ONFT721: batch size exceeds dst batch limit\");\r\n\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            _debitFrom(_from, _dstChainId, _toAddress, _tokenIds[i]);\r\n        }\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\r\n\r\n        _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, dstChainIdToTransferGas[_dstChainId] * _tokenIds.length);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n        emit SendToChain(_dstChainId, _from, _toAddress, _tokenIds);\r\n    }\r\n\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\r\n\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        uint nextIndex = _creditTill(_srcChainId, toAddress, 0, tokenIds);\r\n        if (nextIndex < tokenIds.length) {\r\n            // not enough gas to complete transfers, store to be cleared in another tx\r\n            bytes32 hashedPayload = keccak256(_payload);\r\n            storedCredits[hashedPayload] = StoredCredit(_srcChainId, toAddress, nextIndex, true);\r\n            emit CreditStored(hashedPayload, _payload);\r\n        }\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds);\r\n    }\r\n\r\n    // Public function for anyone to clear and deliver the remaining batch sent tokenIds\r\n    function clearCredits(bytes memory _payload) external {\r\n        bytes32 hashedPayload = keccak256(_payload);\r\n        require(storedCredits[hashedPayload].creditsRemain, \"ONFT721: no credits stored\");\r\n\r\n        (, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\r\n\r\n        uint nextIndex = _creditTill(storedCredits[hashedPayload].srcChainId, storedCredits[hashedPayload].toAddress, storedCredits[hashedPayload].index, tokenIds);\r\n        require(nextIndex > storedCredits[hashedPayload].index, \"ONFT721: not enough gas to process credit transfer\");\r\n\r\n        if (nextIndex == tokenIds.length) {\r\n            // cleared the credits, delete the element\r\n            delete storedCredits[hashedPayload];\r\n            emit CreditCleared(hashedPayload);\r\n        } else {\r\n            // store the next index to mint\r\n            storedCredits[hashedPayload] = StoredCredit(storedCredits[hashedPayload].srcChainId, storedCredits[hashedPayload].toAddress, nextIndex, true);\r\n        }\r\n    }\r\n\r\n    // When a srcChain has the ability to transfer more chainIds in a single tx than the dst can do.\r\n    // Needs the ability to iterate and stop if the minGasToTransferAndStore is not met\r\n    function _creditTill(uint16 _srcChainId, address _toAddress, uint _startIndex, uint[] memory _tokenIds) internal returns (uint256){\r\n        uint i = _startIndex;\r\n        while (i < _tokenIds.length) {\r\n            // if not enough gas to process, store this index for next loop\r\n            if (gasleft() < minGasToTransferAndStore) break;\r\n\r\n            _creditTo(_srcChainId, _toAddress, _tokenIds[i]);\r\n            i++;\r\n        }\r\n\r\n        // indicates the next index to send of tokenIds,\r\n        // if i == tokenIds.length, we are finished\r\n        return i;\r\n    }\r\n\r\n    function setMinGasToTransferAndStore(uint256 _minGasToTransferAndStore) external onlyOwner {\r\n        require(_minGasToTransferAndStore > 0, \"ONFT721: minGasToTransferAndStore must be > 0\");\r\n        minGasToTransferAndStore = _minGasToTransferAndStore;\r\n    }\r\n\r\n    // ensures enough gas in adapter params to handle batch transfer gas amounts on the dst\r\n    function setDstChainIdToTransferGas(uint16 _dstChainId, uint256 _dstChainIdToTransferGas) external onlyOwner {\r\n        require(_dstChainIdToTransferGas > 0, \"ONFT721: dstChainIdToTransferGas must be > 0\");\r\n        dstChainIdToTransferGas[_dstChainId] = _dstChainIdToTransferGas;\r\n    }\r\n\r\n    // limit on src the amount of tokens to batch send\r\n    function setDstChainIdToBatchLimit(uint16 _dstChainId, uint256 _dstChainIdToBatchLimit) external onlyOwner {\r\n        require(_dstChainIdToBatchLimit > 0, \"ONFT721: dstChainIdToBatchLimit must be > 0\");\r\n        dstChainIdToBatchLimit[_dstChainId] = _dstChainIdToBatchLimit;\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\r\n\r\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\r\n        uint[] memory array = new uint[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT721Core is IERC165 {\r\n    /**\r\n     * @dev Emitted when `_tokenIds[]` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint[] _tokenIds);\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds);\r\n\r\n    /**\r\n     * @dev Emitted when `_payload` was received from lz, but not enough gas to deliver all tokenIds\r\n     */\r\n    event CreditStored(bytes32 _hashedPayload, bytes _payload);\r\n    /**\r\n     * @dev Emitted when `_hashedPayload` has been completely delivered\r\n     */\r\n    event CreditCleared(bytes32 _hashedPayload);\r\n\r\n    /**\r\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n    /**\r\n     * @dev send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenId - token Id to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenIds[] - token Ids to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n}\r\n"
    },
    "contracts/mContracts/MozaicVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../lzApp/NonblockingLzApp.sol\";\r\n\r\ncontract MozaicVault is NonblockingLzApp {\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) internal override {\r\n\r\n    }\r\n\r\n    // Receive and spend gift Ether for our customers\r\n    receive() external payable {}\r\n\r\n}"
    },
    "contracts/mContracts/MozaicMainVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../lzApp/NonblockingLzApp.sol\";\r\nimport \"./MozaicVault.sol\";\r\n\r\nabstract contract MozaicMainVault is MozaicVault {\r\n\r\n\r\n\r\n}"
    },
    "contracts/examples/PingPong.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n//\r\n// Note: you will need to fund each deployed contract with gas\r\n//\r\n// PingPong sends a LayerZero message back and forth between chains\r\n// until it is paused or runs out of gas!\r\n//\r\n// Demonstrates:\r\n//  1. a recursive feature of calling send() from inside lzReceive()\r\n//  2. how to `estimateFees` for a send()'ing a LayerZero message\r\n//  3. the contract pays the message fee\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"../lzApp/NonblockingLzApp.sol\";\r\n\r\ncontract PingPong is NonblockingLzApp, Pausable {\r\n    // event emitted every ping() to keep track of consecutive pings count\r\n    event Ping(uint pings);\r\n\r\n    // constructor requires the LayerZero endpoint for this chain\r\n    constructor(address _endpoint) NonblockingLzApp(_endpoint) {}\r\n\r\n    // disable ping-ponging\r\n    function enable(bool en) external {\r\n        if (en) {\r\n            _pause();\r\n        } else {\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    // pings the destination chain, along with the current number of pings sent\r\n    function ping(\r\n        uint16 _dstChainId, // send a ping to this destination chainId\r\n        address, // destination address of PingPong contract\r\n        uint pings // the number of pings\r\n    ) public payable whenNotPaused {\r\n        require(address(this).balance > 0, \"the balance of this contract is 0. pls send gas for message fees\");\r\n\r\n        emit Ping(++pings);\r\n\r\n        // encode the payload with the number of pings\r\n        bytes memory payload = abi.encode(pings);\r\n\r\n        // use adapterParams v1 to specify more gas for the destination\r\n        uint16 version = 1;\r\n        uint gasForDestinationLzReceive = 350000;\r\n        bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\r\n\r\n        // send LayerZero message\r\n        _lzSend( // {value: messageFee} will be paid out of this contract!\r\n            _dstChainId, // destination chainId\r\n            payload, // abi.encode()'ed bytes\r\n            payable(this), // (msg.sender will be this contract) refund address (LayerZero will refund any extra gas back to caller of send()\r\n            address(0x0), // future param, unused for this example\r\n            adapterParams, // v1 adapterParams, specify custom destination gas qty\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) internal override {\r\n        // use assembly to extract the address from the bytes memory parameter\r\n        address sendBackToAddress;\r\n        assembly {\r\n            sendBackToAddress := mload(add(_srcAddress, 20))\r\n        }\r\n\r\n        // decode the number of pings sent thus far\r\n        uint pings = abi.decode(_payload, (uint));\r\n\r\n        // *pong* back to the other side\r\n        ping(_srcChainId, sendBackToAddress, pings);\r\n    }\r\n\r\n    // allow this contract to receive ether\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/examples/OmniCounter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"../lzApp/NonblockingLzApp.sol\";\r\n\r\n/// @title A LayerZero example sending a cross chain message from a source chain to a destination chain to increment a counter\r\ncontract OmniCounter is NonblockingLzApp {\r\n    bytes public constant PAYLOAD = \"\\x01\\x02\\x03\\x04\";\r\n    uint public counter;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory) internal override {\r\n        counter += 1;\r\n    }\r\n\r\n    function estimateFee(uint16 _dstChainId, bool _useZro, bytes calldata _adapterParams) public view returns (uint nativeFee, uint zroFee) {\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), PAYLOAD, _useZro, _adapterParams);\r\n    }\r\n\r\n    function incrementCounter(uint16 _dstChainId) public payable {\r\n        _lzSend(_dstChainId, PAYLOAD, payable(msg.sender), address(0x0), bytes(\"\"), msg.value);\r\n    }\r\n\r\n    function setOracle(uint16 dstChainId, address oracle) external onlyOwner {\r\n        uint TYPE_ORACLE = 6;\r\n        // set the Oracle\r\n        lzEndpoint.setConfig(lzEndpoint.getSendVersion(address(this)), dstChainId, TYPE_ORACLE, abi.encode(oracle));\r\n    }\r\n\r\n    function getOracle(uint16 remoteChainId) external view returns (address _oracle) {\r\n        bytes memory bytesOracle = lzEndpoint.getConfig(lzEndpoint.getSendVersion(address(this)), remoteChainId, address(this), 6);\r\n        assembly {\r\n            _oracle := mload(add(bytesOracle, 32))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mContracts/lzContracts/Endpoint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../../interfaces/ILayerZeroMessagingLibrary.sol\";\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Endpoint is Ownable, ILayerZeroEndpoint {\r\n    uint16 public immutable chainId;\r\n\r\n    // installed libraries and reserved versions\r\n    uint16 public constant BLOCK_VERSION = 65535;\r\n    uint16 public constant DEFAULT_VERSION = 0;\r\n    uint16 public latestVersion;\r\n    mapping(uint16 => ILayerZeroMessagingLibrary) public libraryLookup; // version -> ILayerZeroEndpointLibrary\r\n\r\n    // default send/receive libraries\r\n    uint16 public defaultSendVersion;\r\n    uint16 public defaultReceiveVersion;\r\n    ILayerZeroMessagingLibrary public defaultSendLibrary;\r\n    address public defaultReceiveLibraryAddress;\r\n\r\n    struct LibraryConfig {\r\n        uint16 sendVersion;\r\n        uint16 receiveVersion;\r\n        address receiveLibraryAddress;\r\n        ILayerZeroMessagingLibrary sendLibrary;\r\n    }\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    // user app config = [uaAddress]\r\n    mapping(address => LibraryConfig) public uaConfigLookup;\r\n    // inboundNonce = [srcChainId][srcAddress].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    // outboundNonce = [dstChainId][srcAddress].\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][srcAddress]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n\r\n    // library versioning events\r\n    event NewLibraryVersionAdded(uint16 version);\r\n    event DefaultSendVersionSet(uint16 version);\r\n    event DefaultReceiveVersionSet(uint16 version);\r\n    event UaSendVersionSet(address ua, uint16 version);\r\n    event UaReceiveVersionSet(address ua, uint16 version);\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    // payload events\r\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\r\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\r\n\r\n    constructor(uint16 _chainId) {\r\n        chainId = _chainId;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // send and receive nonreentrant lock\r\n    uint8 internal constant _NOT_ENTERED = 1;\r\n    uint8 internal constant _ENTERED = 2;\r\n    uint8 internal _send_entered_state = 1;\r\n    uint8 internal _receive_entered_state = 1;\r\n\r\n    modifier sendNonReentrant() {\r\n        require(_send_entered_state == _NOT_ENTERED, \"LayerZero: no send reentrancy\");\r\n        _send_entered_state = _ENTERED;\r\n        _;\r\n        _send_entered_state = _NOT_ENTERED;\r\n    }\r\n    modifier receiveNonReentrant() {\r\n        require(_receive_entered_state == _NOT_ENTERED, \"LayerZero: no receive reentrancy\");\r\n        _receive_entered_state = _ENTERED;\r\n        _;\r\n        _receive_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    // BLOCK_VERSION is also a valid version\r\n    modifier validVersion(uint16 _version) {\r\n        require(_version <= latestVersion || _version == BLOCK_VERSION, \"LayerZero: invalid messaging library version\");\r\n        _;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // User Application Calls - Endpoint Interface\r\n\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable override sendNonReentrant {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[msg.sender];\r\n        uint64 nonce = ++outboundNonce[_dstChainId][msg.sender];  // Mike: Not used by ULNV2.\r\n        _getSendLibrary(uaConfig).send{value: msg.value}(msg.sender, nonce, _dstChainId, _destination, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // authenticated Library (msg.sender) Calls to pass through Endpoint to UA (dstAddress)\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external override receiveNonReentrant {\r\n        // assert and increment the nonce. no message shuffling\r\n        require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], \"LayerZero: wrong nonce\");\r\n\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_dstAddress];\r\n\r\n        // authentication to prevent cross-version message validation\r\n        // protects against a malicious library from passing arbitrary data\r\n        if (uaConfig.receiveVersion == DEFAULT_VERSION) {\r\n            require(defaultReceiveLibraryAddress == msg.sender, \"LayerZero: invalid default library\");\r\n        } else {\r\n            require(uaConfig.receiveLibraryAddress == msg.sender, \"LayerZero: invalid library\");\r\n        }\r\n\r\n        // block if any message blocking\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        require(sp.payloadHash == bytes32(0), \"LayerZero: in message blocking\");\r\n\r\n        try ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // success, do nothing, end of the message delivery\r\n        } catch (bytes memory reason) {\r\n            // revert nonce if any uncaught errors/exceptions if the ua chooses the blocking mode\r\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n            emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, reason);\r\n        }\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override receiveNonReentrant {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZero: invalid payload\");\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);\r\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Owner Calls, only new library version upgrade (3 steps)\r\n\r\n    // note libraryLookup[0] = 0x0, no library implementation\r\n    // LIBRARY UPGRADE step 1: set _newLayerZeroLibraryAddress be the new version\r\n    function newVersion(address _newLayerZeroLibraryAddress) external onlyOwner {\r\n        require(_newLayerZeroLibraryAddress != address(0x0), \"LayerZero: new version cannot be zero address\");\r\n        require(latestVersion < 65535, \"LayerZero: can not add new messaging library\");\r\n        latestVersion++;\r\n        libraryLookup[latestVersion] = ILayerZeroMessagingLibrary(_newLayerZeroLibraryAddress);\r\n        emit NewLibraryVersionAdded(latestVersion);\r\n    }\r\n\r\n    // LIBRARY UPGRADE step 2: stop sending messages from the old version\r\n    function setDefaultSendVersion(uint16 _newDefaultSendVersion) external onlyOwner validVersion(_newDefaultSendVersion) {\r\n        require(_newDefaultSendVersion != DEFAULT_VERSION, \"LayerZero: default send version must > 0\");\r\n        defaultSendVersion = _newDefaultSendVersion;\r\n        defaultSendLibrary = libraryLookup[defaultSendVersion];\r\n        emit DefaultSendVersionSet(_newDefaultSendVersion);\r\n    }\r\n\r\n    // LIBRARY UPGRADE step 3: stop receiving messages from the old version\r\n    function setDefaultReceiveVersion(uint16 _newDefaultReceiveVersion) external onlyOwner validVersion(_newDefaultReceiveVersion) {\r\n        require(_newDefaultReceiveVersion != DEFAULT_VERSION, \"LayerZero: default receive version must > 0\");\r\n        defaultReceiveVersion = _newDefaultReceiveVersion;\r\n        defaultReceiveLibraryAddress = address(libraryLookup[defaultReceiveVersion]);\r\n        emit DefaultReceiveVersionSet(_newDefaultReceiveVersion);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // User Application Calls - UA set/get Interface\r\n\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override validVersion(_version) {\r\n        if (_version == DEFAULT_VERSION) {\r\n            require(defaultSendVersion == defaultReceiveVersion, \"LayerZero: can not set Config during DEFAULT migration\");\r\n            _version = defaultSendVersion;\r\n        }\r\n        require(_version != BLOCK_VERSION, \"LayerZero: can not set config for BLOCK_VERSION\");\r\n        libraryLookup[_version].setConfig(_chainId, msg.sender, _configType, _config);\r\n    }\r\n\r\n    // Migration step 1: set the send version\r\n    // Define what library the UA points too\r\n    function setSendVersion(uint16 _newVersion) external override validVersion(_newVersion) {\r\n        // write into config\r\n        LibraryConfig storage uaConfig = uaConfigLookup[msg.sender];\r\n        uaConfig.sendVersion = _newVersion;\r\n        // the libraryLookup[BLOCK_VERSION || DEFAULT_VERSION] = 0x0\r\n        uaConfig.sendLibrary = libraryLookup[_newVersion];\r\n        emit UaSendVersionSet(msg.sender, _newVersion);\r\n    }\r\n\r\n    // Migration step 2: set the receive version\r\n    // after all messages sent from the old version are received\r\n    // the UA can now safely switch to the new receive version\r\n    // it is the UA's responsibility make sure all messages from the old version are processed\r\n    function setReceiveVersion(uint16 _newVersion) external override validVersion(_newVersion) {\r\n        // write into config\r\n        LibraryConfig storage uaConfig = uaConfigLookup[msg.sender];\r\n        uaConfig.receiveVersion = _newVersion;\r\n        // the libraryLookup[BLOCK_VERSION || DEFAULT_VERSION] = 0x0\r\n        uaConfig.receiveLibraryAddress = address(libraryLookup[_newVersion]);\r\n        emit UaReceiveVersionSet(msg.sender, _newVersion);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(sp.dstAddress == msg.sender, \"LayerZero: invalid caller\");\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        // emit the event with the new nonce\r\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // view helper function\r\n\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParams) external view override returns (uint nativeFee, uint zroFee) {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_userApplication];\r\n        ILayerZeroMessagingLibrary lib = uaConfig.sendVersion == DEFAULT_VERSION ? defaultSendLibrary : uaConfig.sendLibrary;\r\n        return lib.estimateFees(_dstChainId, _userApplication, _payload, _payInZRO, _adapterParams);\r\n    }\r\n\r\n    function _getSendLibrary(LibraryConfig storage uaConfig) internal view returns (ILayerZeroMessagingLibrary) {\r\n        if (uaConfig.sendVersion == DEFAULT_VERSION) {\r\n            // check if the in send-blocking upgrade\r\n            require(defaultSendVersion != BLOCK_VERSION, \"LayerZero: default in BLOCK_VERSION\");\r\n            return defaultSendLibrary;\r\n        } else {\r\n            // check if the in send-blocking upgrade\r\n            require(uaConfig.sendVersion != BLOCK_VERSION, \"LayerZero: in BLOCK_VERSION\");\r\n            return uaConfig.sendLibrary;\r\n        }\r\n    }\r\n\r\n    function getSendLibraryAddress(address _userApplication) external view override returns (address sendLibraryAddress) {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_userApplication];\r\n        uint16 sendVersion = uaConfig.sendVersion;\r\n        require(sendVersion != BLOCK_VERSION, \"LayerZero: send version is BLOCK_VERSION\");\r\n        if (sendVersion == DEFAULT_VERSION) {\r\n            require(defaultSendVersion != BLOCK_VERSION, \"LayerZero: send version (default) is BLOCK_VERSION\");\r\n            sendLibraryAddress = address(defaultSendLibrary);\r\n        } else {\r\n            sendLibraryAddress = address(uaConfig.sendLibrary);\r\n        }\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address _userApplication) external view override returns (address receiveLibraryAddress) {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_userApplication];\r\n        uint16 receiveVersion = uaConfig.receiveVersion;\r\n        require(receiveVersion != BLOCK_VERSION, \"LayerZero: receive version is BLOCK_VERSION\");\r\n        if (receiveVersion == DEFAULT_VERSION) {\r\n            require(defaultReceiveVersion != BLOCK_VERSION, \"LayerZero: receive version (default) is BLOCK_VERSION\");\r\n            receiveLibraryAddress = defaultReceiveLibraryAddress;\r\n        } else {\r\n            receiveLibraryAddress = uaConfig.receiveLibraryAddress;\r\n        }\r\n    }\r\n\r\n    function isSendingPayload() external view override returns (bool) {\r\n        return _send_entered_state == _ENTERED;\r\n    }\r\n\r\n    function isReceivingPayload() external view override returns (bool) {\r\n        return _receive_entered_state == _ENTERED;\r\n    }\r\n\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (uint64) {\r\n        return inboundNonce[_srcChainId][_srcAddress];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view override returns (uint64) {\r\n        return outboundNonce[_dstChainId][_srcAddress];\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return chainId;\r\n    }\r\n\r\n    function getSendVersion(address _userApplication) external view override returns (uint16) {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_userApplication];\r\n        return uaConfig.sendVersion == DEFAULT_VERSION ? defaultSendVersion : uaConfig.sendVersion;\r\n    }\r\n\r\n    function getReceiveVersion(address _userApplication) external view override returns (uint16) {\r\n        LibraryConfig storage uaConfig = uaConfigLookup[_userApplication];\r\n        return uaConfig.receiveVersion == DEFAULT_VERSION ? defaultReceiveVersion : uaConfig.receiveVersion;\r\n    }\r\n\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view override validVersion(_version) returns (bytes memory) {\r\n        if (_version == DEFAULT_VERSION) {\r\n            require(defaultSendVersion == defaultReceiveVersion, \"LayerZero: no DEFAULT config while migration\");\r\n            _version = defaultSendVersion;\r\n        }\r\n        require(_version != BLOCK_VERSION, \"LayerZero: can not get config for BLOCK_VERSION\");\r\n        return libraryLookup[_version].getConfig(_chainId, _userApplication, _configType);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroEndpoint copy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "contracts/token/onft/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT721 is IONFT721Core, IERC721 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/mocks/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n// for mock purposes only, no limit on minting functionality\r\ncontract ERC721Mock is ERC721 {\r\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\r\n\r\n    string public baseTokenURI;\r\n\r\n    function mint(address to, uint tokenId) public {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function transfer(address to, uint tokenId) public {\r\n        _safeTransfer(msg.sender, to, tokenId, \"\");\r\n    }\r\n\r\n    function isApprovedOrOwner(address spender, uint tokenId) public view virtual returns (bool) {\r\n        return _isApprovedOrOwner(spender, tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/ONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721.sol\";\r\nimport \"./ONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT721 is ONFT721Core, ERC721, IONFT721 {\r\n    constructor(string memory _name, string memory _symbol, uint256 _minGasToTransfer, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_minGasToTransfer, _lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721: send caller is not owner nor approved\");\r\n        require(ERC721.ownerOf(_tokenId) == _from, \"ONFT721: send from incorrect owner\");\r\n        _transfer(_from, address(this), _tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        require(!_exists(_tokenId) || (_exists(_tokenId) && ERC721.ownerOf(_tokenId) == address(this)));\r\n        if (!_exists(_tokenId)) {\r\n            _safeMint(_toAddress, _tokenId);\r\n        } else {\r\n            _transfer(address(this), _toAddress, _tokenId);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ONFT721Mock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/onft/ONFT721.sol\";\r\n\r\ncontract ONFT721Mock is ONFT721 {\r\n    constructor(string memory _name, string memory _symbol, uint256 _minGasToStore, address _layerZeroEndpoint) ONFT721(_name, _symbol, _minGasToStore, _layerZeroEndpoint) {}\r\n\r\n    function mint(address _tokenOwner, uint _newId) external payable {\r\n        _safeMint(_tokenOwner, _newId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/extension/UniversalONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ONFT721.sol\";\r\n\r\n/// @title Interface of the UniversalONFT standard\r\ncontract UniversalONFT721 is ONFT721 {\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n\r\n    /// @notice Constructor for the UniversalONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain\r\n    /// @param _endMintId the max number of mints on this chain\r\n    constructor(string memory _name, string memory _symbol, uint256 _minGasToTransfer, address _layerZeroEndpoint, uint _startMintId, uint _endMintId) ONFT721(_name, _symbol, _minGasToTransfer, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n    }\r\n\r\n    /// @notice Mint your ONFT\r\n    function mint() external payable {\r\n        require(nextMintId <= maxMintId, \"UniversalONFT721: max mint limit reached\");\r\n\r\n        uint newId = nextMintId;\r\n        nextMintId++;\r\n\r\n        _safeMint(msg.sender, newId);\r\n    }\r\n}\r\n"
    },
    "contracts/examples/ExampleUniversalONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q&Rdq6qKDWQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QRXt<~'`          ._^cag@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@k*,                         `!jQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@U;                                 ,}Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@g;                                     'w@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@i                                         ~Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L                  '*Ij}i~                  :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@k                  7@@@@@@@D                  =@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@t^^^^^^^^^^^^;~'`  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QUz+:'`    k@@@@@@@@                  '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@K?'           k@@@@@@@@                  X@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b;              k@@@@@@@@                 f@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q;                k@@@@@@@@               =Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q'                 k@@@@@@@@           `;5Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@7                  k@@@@@@@@       ,~|ZQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  k@@@@@@@@  `',;><<<<<<<<<<<?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!                  k@@@@@@@@                  `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@f                  y@@@@@@@Q                  ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                  +obDdhL`                 `Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?                                         :Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'                                     `L@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@k;                                 ,YQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QP>'                         `;}Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Rj7^,`             `';iZWQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q#RdqAAKDWQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\nimport \"../token/onft/extension/UniversalONFT721.sol\";\r\n\r\n/// @title A LayerZero UniversalONFT example\r\n/// @notice You can use this to mint ONFT and send nftIds across chain.\r\n///  Each contract deployed to a chain should carefully set a `_startMintIndex` and a `_maxMint`\r\n///  value to set a range of allowed mintable nftIds (so that no two chains can mint the same id!)\r\ncontract ExampleUniversalONFT721 is UniversalONFT721 {\r\n    constructor(uint256 _minGasToStore, address _layerZeroEndpoint, uint _startMintId, uint _endMintId) UniversalONFT721(\"ExampleUniversalONFT721\", \"ONFT721\", _minGasToStore, _layerZeroEndpoint, _startMintId, _endMintId) {}\r\n}\r\n"
    },
    "contracts/contracts-upgradable/token/ONFT721/ONFT721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\r\nimport \"./ONFT721CoreUpgradeable.sol\";\r\nimport \"./IONFT721Upgradeable.sol\";\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT721Upgradeable is Initializable, ONFT721CoreUpgradeable, ERC721Upgradeable, IONFT721Upgradeable {\r\n    function __ONFT721Upgradeable_init(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {\r\n        __ERC721_init_unchained(_name, _symbol);\r\n        __ONFT721CoreUpgradeable_init_unchained(_lzEndpoint);\r\n    }\r\n\r\n    function __ONFT721Upgradeable_init_unchained(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721CoreUpgradeable, ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IONFT721Upgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721: send caller is not owner nor approved\");\r\n        require(ERC721Upgradeable.ownerOf(_tokenId) == _from, \"ONFT721: send from incorrect owner\");\r\n        _transfer(_from, address(this), _tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        require(!_exists(_tokenId) || (_exists(_tokenId) && ERC721Upgradeable.ownerOf(_tokenId) == address(this)));\r\n        if (!_exists(_tokenId)) {\r\n            _safeMint(_toAddress, _tokenId);\r\n        } else {\r\n            _transfer(address(this), _toAddress, _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "contracts/contracts-upgradable/token/ONFT721/ONFT721CoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\r\nimport \"../../lzApp/NonblockingLzAppUpgradeable.sol\";\r\nimport \"./IONFT721CoreUpgradeable.sol\";\r\n\r\nabstract contract ONFT721CoreUpgradeable is Initializable, NonblockingLzAppUpgradeable, ERC165Upgradeable, IONFT721CoreUpgradeable {\r\n    uint public constant NO_EXTRA_GAS = 0;\r\n    uint public constant FUNCTION_TYPE_SEND = 1;\r\n    bool public useCustomAdapterParams;\r\n\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n\r\n    function __ONFT721CoreUpgradeable_init(address _lzEndpoint) internal onlyInitializing {\r\n        __ONFT721CoreUpgradeable_init_unchained(_lzEndpoint);\r\n    }\r\n\r\n    function __ONFT721CoreUpgradeable_init_unchained(address _lzEndpoint) internal onlyInitializing {\r\n        __NonblockingLzAppUpgradeable_init_unchained(_lzEndpoint);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IONFT721CoreUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, NO_EXTRA_GAS);\r\n        } else {\r\n            require(_adapterParams.length == 0, \"LzApp: _adapterParams must be empty.\");\r\n        }\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenId);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\r\n    }\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external onlyOwner {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "contracts/contracts-upgradable/token/ONFT721/IONFT721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"./IONFT721CoreUpgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT721Upgradeable is IONFT721CoreUpgradeable, IERC721Upgradeable {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/contracts-upgradable/token/ONFT721/IONFT721CoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT721CoreUpgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenId - token Id to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}\r\n"
    },
    "contracts/contracts-upgradable/example/ExampleONFT721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\r\nimport \"../token/ONFT721/ONFT721Upgradeable.sol\";\r\n\r\ncontract ExampleONFT721Upgradeable is Initializable, ONFT721Upgradeable, Proxied {\r\n    function initialize(string memory _name, string memory _symbol, address _lzEndpoint) public initializer {\r\n        __ONFT721UpgradeableMock_init(_name, _symbol, _lzEndpoint);\r\n    }\r\n\r\n    function __ONFT721UpgradeableMock_init(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {\r\n        __Ownable_init();\r\n        __ONFT721Upgradeable_init(_name, _symbol, _lzEndpoint);\r\n    }\r\n\r\n    function __ONFT721UpgradeableMock_init_unchained(string memory _name, string memory _symbol, address _lzEndpoint) internal onlyInitializing {}\r\n\r\n    function mint(address _tokenOwner, uint _newId) external payable {\r\n        _safeMint(_tokenOwner, _newId);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint[50] private __gap;\r\n}\r\n"
    },
    "contracts/token/onft/extension/ProxyONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\n\r\ncontract ProxyONFT1155 is ONFT1155Core, IERC1155Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC1155 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ONFT1155Core(_lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC1155).interfaceId), \"ProxyONFT1155: invalid ERC1155 token\");\r\n        token = IERC1155(_proxyToken);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT1155: owner is not send caller\");\r\n        token.safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        token.safeBatchTransferFrom(address(this), _toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function onERC1155Received(address _operator, address, uint, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address _operator, address, uint[] memory, uint[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/examples/ExampleComposableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/composable/ComposableOFT.sol\";\r\n\r\n/// @title A LayerZero OmnichainFungibleToken example of BasedOFT\r\n/// @notice Use this contract only on the BASE CHAIN. It locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\r\ncontract ExampleComposableOFT is ComposableOFT {\r\n    constructor(address _layerZeroEndpoint, uint _initialSupply) ComposableOFT(\"ExampleComposableOFT\", \"OFT\", _layerZeroEndpoint) {\r\n        _mint(_msgSender(), _initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC1155Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\n// for mock purposes only, no limit on minting functionality\r\ncontract ERC1155Mock is ERC1155 {\r\n    constructor(string memory uri_) ERC1155(uri_) {}\r\n\r\n    function mint(address _to, uint _tokenId, uint _amount) public {\r\n        _mint(_to, _tokenId, _amount, \"\");\r\n    }\r\n\r\n    function mintBatch(address _to, uint[] memory _tokenIds, uint[] memory _amounts) public {\r\n        _mintBatch(_to, _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function transfer(address _to, uint _tokenId, uint _amount) public {\r\n        _safeTransferFrom(msg.sender, _to, _tokenId, _amount, \"\");\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}